/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:29:54 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.freehep.math.minuit.ContoursError;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MinosError;
import org.freehep.math.minuit.MinuitParameter;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnGlobalCorrelationCoeff;
import org.freehep.math.minuit.MnPrint;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.freehep.math.minuit.Point;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnPrint_ESTest extends MnPrint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      
      int int0 = 1857;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 1.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MinimumState minimumState1 = functionMinimum0.state();
      assertNotNull(minimumState1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      String string0 = MnPrint.toString(minimumState1);
      assertNotNull(string0);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      String string1 = MnPrint.toString(minimumState1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertNotSame(string1, string0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[4] = double0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockPrintWriter0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnGlobalCorrelationCoeff0);
      assertTrue(string0.equals((Object)string1));
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertNotSame(string0, string1);
      assertTrue(linkedList0.contains(minimumState0));
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      int int1 = (-2436);
      LinkedList<Point> linkedList1 = new LinkedList<Point>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      double double1 = 0.0;
      double double2 = 0.0;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      String string2 = MnPrint.toString(functionMinimum0);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(minimumState0, minimumState1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      int int2 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      
      String string3 = MnPrint.toString(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertNotNull(string3);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertEquals("LASymMatrix parameters:\n\n", string3);
      
      // Undeclared exception!
      MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ":iGf7T5/noLn;V7b3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 818.140717538254;
      doubleArray0[1] = double1;
      double double2 = 417.20666987578096;
      doubleArray0[2] = double2;
      double double3 = (-14.76);
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      int int0 = 0;
      String string1 = "uE\"p8)IuAbMVhm_9l";
      double double4 = 0.0;
      double double5 = (-1583.8);
      double double6 = (-969.4);
      mnUserParameters0.add(string1, double4, double5, double6, double1);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double1, double5, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertNotEquals(double1, double6, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double5, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double6, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double6, 0.01);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setPrecision(double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      
      double[] doubleArray1 = mnUserParameters0.errors();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76), (-1583.8)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setUpperLimit(int0, double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double5, 0.01);
      assertNotEquals(double0, double4, 0.01);
      assertNotEquals(double0, double6, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(string0, string1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double0 = 1.0;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      int int1 = 2334;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, double0, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mnUserParameterState0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(2334, mnUserParameterState0.nfcn());
      assertEquals(1.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1.0, mnUserParameterState0.fval(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MnPrint.print(printWriter0, mnUserParameterState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(2334, mnUserParameterState0.nfcn());
      assertEquals(1.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1.0, mnUserParameterState0.fval(), 0.01);
      
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter1).printf(anyString() , any(java.lang.Object[].class));
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotNull(mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = mnAlgebraicVector0.toString();
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertNotNull(string0);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertEquals("LAVector parameters:\n\n0.00000 \n", string0);
      
      int int2 = 2335;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(2335, mnUserCovariance0.nrow());
      assertEquals(2335, mnUserCovariance0.ncol());
      
      // Undeclared exception!
      MnPrint.print(printWriter1, mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = ":iGf7T5/noLn;V7b3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 818.140717538254;
      doubleArray0[1] = double1;
      double double2 = 417.20666987578096;
      doubleArray0[2] = double2;
      double double3 = (-14.76);
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      int int0 = 0;
      int int1 = 0;
      mnUserParameters0.setValue(int1, doubleArray0[3]);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setPrecision(double0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setUpperLimit(int0, double0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(contoursError0).nfcn();
      doReturn((List) null).when(contoursError0).points();
      doReturn((MinosError) null).when(contoursError0).xMinosError();
      doReturn(0.0).when(contoursError0).xmin();
      doReturn((MinosError) null).when(contoursError0).yMinosError();
      doReturn(0.0).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ":iGf7T5/noLn;V7b3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 818.140717538254;
      doubleArray0[1] = double1;
      double double2 = 417.20666987578096;
      doubleArray0[2] = double2;
      double double3 = (-14.76);
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      mnUserParameters0.add(string0, doubleArray0[2]);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      int int0 = 0;
      mnUserParameters0.setPrecision(double0);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setUpperLimit(int0, double0);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      MinimumParameters minimumParameters0 = null;
      int int1 = (-1454);
      MinimumState minimumState0 = null;
      try {
        minimumState0 = new MinimumState(minimumParameters0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MinimumState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      
      int int0 = 1857;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 1.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      double double1 = 479.0;
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double1, functionMinimum_MnAboveMaxEdm0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(479.0, functionMinimum0.errorDef(), 0.01);
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertNotEquals(double0, double1, 0.01);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MinimumState minimumState1 = functionMinimum0.state();
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(minimumState1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState1));
      assertEquals(1, linkedList0.size());
      assertEquals(1857, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(479.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      String string0 = MnPrint.toString(minimumState1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(string0);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState1));
      assertEquals(1, linkedList0.size());
      assertEquals(1857, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(479.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      String string1 = MnPrint.toString(minimumState1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertNotSame(string1, string0);
      assertTrue(linkedList0.contains(minimumState1));
      assertEquals(1, linkedList0.size());
      assertEquals(1857, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(479.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = double0;
      doubleArray1[4] = double1;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {479.0, 479.0, 1.0, 0.0, 479.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      // Undeclared exception!
      MnPrint.toString(minimumState1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n   0.00000    0.00000 \n   0.00000    0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN NaN \nNaN NaN \n", string0);
      
      int int1 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 293.04202616;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      String string1 = MnPrint.toString(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 293.042\nminimum internal state vector: LAVector parameters:\n\n\n\nminimum internal gradient vector: LAVector parameters:\n\n\n\n\n", string1);
      
      double double1 = 0.0;
      int int2 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      double double2 = 588.152804;
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, double2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(functionGradient0);
      
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double2, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotNull(minimumState1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double2;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int2;
      doubleArray0[5] = double2;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {2.0, 293.04202616, 588.152804, 0.0, 1.0, 588.152804}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState1, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {2.0, 293.04202616, 588.152804, 0.0, 1.0, 588.152804}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double3 = 0.0;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {2.0, 293.04202616, 588.152804, 0.0, 1.0, 588.152804}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotNull(list0);
      assertNotSame(minimumState1, minimumState0);
      assertFalse(list0.contains(minimumState0));
      assertArrayEquals(new double[] {2.0, 293.04202616, 588.152804, 0.0, 1.0, 588.152804}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      double double4 = (-1.0);
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, double4, functionMinimum_MnReachedCallLimit0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double4, 0.01);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertNotNull(functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      assertArrayEquals(new double[] {2.0, 293.04202616, 588.152804, 0.0, 1.0, 588.152804}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0, functionMinimum1.nfcn());
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals((-1.0), functionMinimum1.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ":iGf7T5/noLn;V7b3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 828.470832745;
      doubleArray0[1] = double1;
      double double2 = 417.20666987578096;
      doubleArray0[2] = double2;
      double double3 = (-831.1232893452333);
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 828.470832745, 417.20666987578096, (-831.1232893452333)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      int int0 = 0;
      mnUserParameters0.setUpperLimit(int0, double0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double3, 0.01);
      assertArrayEquals(new double[] {1.0, 828.470832745, 417.20666987578096, (-831.1232893452333)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 828.470832745, 417.20666987578096, (-831.1232893452333)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      double double0 = 1444.45;
      double[] doubleArray0 = new double[3];
      double double1 = (-306.0);
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnCross mnCross1 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      double double2 = (-587.152804);
      String string0 = "";
      String string1 = "PDHkfrnsOt8G3";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(minosError0.lowerValid());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertTrue(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      String string2 = mnUserParameterState0.name(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals("p0", string2);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(mnCross0, mnCross1);
      assertNotSame(mnCross1, mnCross0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(minosError0.lowerValid());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertTrue(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      String string3 = MnPrint.toString(minosError0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(mnCross0, mnCross1);
      assertNotSame(mnCross1, mnCross0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(minosError0.lowerValid());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertTrue(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals("\nMinos # of function calls: 0\nMinos error is not valid.\nlower Minos error is not valid.\nupper Minos error is not valid.\nMinos number of function calls for lower error exhausted.\nMinos number of function calls for upper error exhausted.\n# ext. ||   name    || value@min ||  negative || positive  \n   0||        p0||   1444.45||   306.000||  -306.000\n\n", string3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = " z8zX$z<+y4.V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      float float0 = 0.0F;
      mockPrintWriter0.println(float0);
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int int0 = 1;
      MnCross.CrossParLimit mnCross_CrossParLimit0 = null;
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossParLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(minosError0.atUpperLimit());
      assertTrue(minosError0.atLowerLimit());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperValid());
      assertEquals(1.0, minosError0.min(), 0.01);
      assertFalse(minosError0.isValid());
      assertEquals(2, minosError0.nfcn());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      
      String string1 = MnPrint.toString(minosError0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(minosError0.atUpperLimit());
      assertTrue(minosError0.atLowerLimit());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperValid());
      assertEquals(1.0, minosError0.min(), 0.01);
      assertFalse(minosError0.isValid());
      assertEquals(2, minosError0.nfcn());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertEquals("\nMinos # of function calls: 2\nMinos error is not valid.\nlower Minos error is not valid.\nupper Minos error is not valid.\nMinos error is lower limit of parameter 1\nMinos error is upper limit of parameter 1\n# ext. ||   name    || value@min ||  negative || positive  \n   1||        p1||   1.00000||  -1.00000||   1.00000\n\n", string1);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(minosError0.atUpperLimit());
      assertTrue(minosError0.atLowerLimit());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperValid());
      assertEquals(1.0, minosError0.min(), 0.01);
      assertFalse(minosError0.isValid());
      assertEquals(2, minosError0.nfcn());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n   0.00000    0.00000 \n   0.00000    0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN NaN \nNaN NaN \n", string0);
      
      int int1 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 293.04202616;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      String string1 = MnPrint.toString(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 293.042\nminimum internal state vector: LAVector parameters:\n\n\n\nminimum internal gradient vector: LAVector parameters:\n\n\n\n\n", string1);
      
      double double1 = 0.0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertFalse(int0 == int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff(mnAlgebraicSymMatrix0);
      assertFalse(int0 == int1);
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      
      String string2 = MnPrint.toString(mnGlobalCorrelationCoeff0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      assertEquals("\nMnGlobalCorrelationCoeff: \n\nNaN\nNaN\n", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 3332;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte)49;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-64);
      byteArray0[2] = byte2;
      byte byte3 = (byte)26;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-99);
      byteArray0[4] = byte4;
      byte byte5 = (byte)2;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)49, (byte) (-64), (byte)26, (byte) (-99), (byte)2, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnAlgebraicSymMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-9);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals((-9), mnUserCovariance0.nrow());
      assertEquals((-9), mnUserCovariance0.ncol());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals((-9), mnUserCovariance0.nrow());
      assertEquals((-9), mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n", string0);
      
      MinimumState minimumState0 = null;
      try {
        minimumState0 = new MinimumState(int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = " z8zX$z<+y4.V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      mockPrintWriter0.println((Object) string0);
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "";
      String string1 = "* parameter is at lower limit";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("* parameter is at lower limit", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/* parameter is at lower limit", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFileWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("* parameter is at lower limit", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/* parameter is at lower limit", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("* parameter is at lower limit", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/* parameter is at lower limit", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, int0, mnUserTransformation0);
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(1.0, mnUserParameterState0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnUserParameterState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Minos found a new minimum in negative direction.";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) string0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, string0, objectArray0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotNull(printWriter0);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnPrint.print(printWriter0, mnAlgebraicSymMatrix0);
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("Minos found a new minimum in negative direction.", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      int int1 = (-2146356799);
      MinimumParameters minimumParameters0 = null;
      try {
        minimumParameters0 = new MinimumParameters(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharSequence charSequence0 = null;
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(charSequence0);
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("null", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
      assertEquals(4, charArrayWriter1.size());
      assertEquals("null", charArrayWriter1.toString());
      
      char char0 = 'y';
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append(char0);
      assertNotNull(charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals("nully", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter0.size());
      assertEquals("nully", charArrayWriter1.toString());
      assertEquals(5, charArrayWriter1.size());
      assertEquals(5, charArrayWriter2.size());
      assertEquals("nully", charArrayWriter2.toString());
      
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      charArrayWriter2.writeTo(charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals(10, charArrayWriter0.size());
      assertEquals("nullynully", charArrayWriter0.toString());
      assertEquals("nullynully", charArrayWriter1.toString());
      assertEquals(10, charArrayWriter1.size());
      assertEquals(10, charArrayWriter2.size());
      assertEquals("nullynully", charArrayWriter2.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertNotNull(mockPrintWriter0);
      assertEquals(10, charArrayWriter0.size());
      assertEquals("nullynully", charArrayWriter0.toString());
      assertEquals("nullynully", charArrayWriter1.toString());
      assertEquals(10, charArrayWriter1.size());
      assertEquals(10, charArrayWriter2.size());
      assertEquals("nullynully", charArrayWriter2.toString());
      
      int int0 = 2;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertEquals(0, minosError0.nfcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Spliterator<Object> spliterator0 = linkedList1.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, linkedList1.size());
      
      boolean boolean3 = linkedList0.removeAll(linkedList1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(boolean3);
      
      ContoursError contoursError0 = new ContoursError(int0, int0, linkedList0, minosError0, minosError0, int0);
      assertNotNull(contoursError0);
      assertEquals(2, contoursError0.nfcn());
      assertEquals(2, contoursError0.ypar());
      assertEquals(2, contoursError0.xpar());
      assertEquals(0.0, contoursError0.ymin(), 0.01);
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, minosError0.nfcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, contoursError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "min == max";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      
      String string1 = mnUserCovariance0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", string1);
      
      String string2 = MnPrint.toString(mnUserCovariance0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", string2);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      String string3 = MnPrint.toString(mnGlobalCorrelationCoeff0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals("\nMnGlobalCorrelationCoeff: \n\n", string3);
      
      String string4 = mnGlobalCorrelationCoeff0.toString();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals("\nMnGlobalCorrelationCoeff: \n\n", string4);
      
      URI uRI0 = null;
      String string5 = "";
      MockFile mockFile0 = new MockFile(string1, string5);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(mockFile0);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/evosuite_6th/\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(mockPrintWriter0);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.getName());
      assertEquals("/home/evosuite_6th/\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      int int1 = 1;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) string1, int1, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(printWriter0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(1, mnUserCovariance0.nrow());
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/evosuite_6th", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.getName());
      assertEquals("/home/evosuite_6th/\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double0 = (-4311.235033);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int1);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      int int2 = 0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double0, int2);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      double double1 = 0.0;
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double1, functionMinimum_MnAboveMaxEdm0);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(minimumState0));
      assertFalse(list0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      double double2 = (-1279.53493118);
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, double2, functionMinimum_MnReachedCallLimit0);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotNull(functionMinimum1);
      assertFalse(linkedList0.contains(minimumState0));
      assertFalse(list0.contains(minimumState0));
      assertEquals((-1279.53493118), functionMinimum1.errorDef(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, functionMinimum1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      double double0 = 1444.45;
      double[] doubleArray0 = new double[3];
      double double1 = (-306.0);
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      MnCross mnCross1 = new MnCross();
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      
      double double2 = (-587.152804);
      mnUserParameterState0.setLimits(int0, double2, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      String string0 = "";
      String string1 = "PDHkfrnsOt8G3";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      
      String string2 = mnUserParameterState0.name(int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals("p0", string2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      double double0 = 1444.45;
      double[] doubleArray0 = new double[3];
      double double1 = (-306.0);
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(int0);
      assertNotNull(mnCross0);
      
      MnCross mnCross1 = new MnCross();
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(minosError0);
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.lowerNewMin());
      
      String string0 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||   -306.000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    0.00000 || no\n\n\n\n\n", string0);
      
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "KC`G;\"V+[nD/btZ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.canWrite());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      double double0 = 1068.5512897915;
      mockPrintWriter0.println(double0);
      assertTrue(mockFile0.canWrite());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnGlobalCorrelationCoeff0);
      assertTrue(mockFile0.canWrite());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      int int0 = (-2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[7] = (double) int0;
      int int1 = 2;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      assertTrue(mockFile0.canWrite());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      assertTrue(mockFile0.canWrite());
      assertEquals("btZ", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("KC`G;\"V+[nD", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("KC`G;\"V+[nD/btZ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int int2 = 0;
      MnCross.CrossNewMin mnCross_CrossNewMin0 = new MnCross.CrossNewMin();
      assertNotNull(mnCross_CrossNewMin0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int2, mnCross_CrossNewMin0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(mnCross0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnCross.CrossParLimit mnCross_CrossParLimit0 = new MnCross.CrossParLimit();
      assertNotNull(mnCross_CrossParLimit0);
      
      MnCross mnCross1 = new MnCross(mnUserParameterState0, int2, mnCross_CrossParLimit0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(minosError0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atUpperLimit());
      assertEquals((-2), minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.lowerNewMin());
      assertEquals((-2.0), minosError0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = " z8zX$z<+y4.V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      int int0 = 131;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnAlgebraicVector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ">BZF(LkWmq[|&LrE";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double0 = 0.0;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      double double1 = 2097.9;
      doubleArray0[2] = double1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 2097.9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotEquals(double0, double1, 0.01);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 0.0, 2097.9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = 1.0;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double2);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 2097.9}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Locale locale0 = null;
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string0, objectArray0);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      int int1 = 1;
      MinimumState minimumState0 = new MinimumState(int1);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int1);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnUserCovariance mnUserCovariance0 = functionMinimum0.userCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnPrint.print(printWriter0, mnUserCovariance0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(65, byteArrayOutputStream0.size());
      assertEquals("\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n", byteArrayOutputStream0.toString());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrintWriter printWriter0 = null;
      ContoursError contoursError0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals("\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n", string0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 814.1;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      String string1 = MnPrint.toString(minimumState0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("\nminimum function value: 1.00000\nminimum edm: 814.100\nminimum internal state vector: LAVector parameters:\n\n0.00000 \n\nminimum internal gradient vector: LAVector parameters:\n\n0.00000 \n\n\n", string1);
      
      String string2 = MnPrint.toString(mnAlgebraicVector0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("LAVector parameters:\n\n0.00000 \n", string2);
      
      String string3 = MnPrint.toString(mnAlgebraicVector0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertEquals("LAVector parameters:\n\n0.00000 \n", string3);
      
      String string4 = MnPrint.toString(mnAlgebraicVector0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertEquals("LAVector parameters:\n\n0.00000 \n", string4);
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mnUserParameterState0.globalCC();
      assertNull(mnGlobalCorrelationCoeff0);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(mnGlobalCorrelationCoeff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "         ||%H0g   ||";
      Object object0 = new Object();
      assertNotNull(object0);
      
      PrintWriter printWriter0 = null;
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      int int1 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnMadePosDef minimumError_MnMadePosDef0 = new MinimumError.MnMadePosDef();
      assertNotNull(minimumError_MnMadePosDef0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnMadePosDef0);
      assertFalse(int1 == int0);
      assertNotNull(minimumError0);
      
      int int2 = 414;
      MinimumState minimumState0 = new MinimumState(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(functionMinimum0);
      assertEquals(414.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(list0);
      assertFalse(list0.contains(minimumState0));
      assertEquals(414.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, int0, functionMinimum_MnAboveMaxEdm0);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(414.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      FunctionGradient functionGradient0 = functionMinimum1.grad();
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertNotNull(functionGradient0);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(414.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int3 = 1068;
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int2, int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotNull(minimumState1);
      assertFalse(list0.contains(minimumState1));
      assertEquals(414.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minimumState1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = null;
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      int int1 = (-2806);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(minimumState0));
      assertFalse(list0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      double double0 = 2403.0642;
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, double0, functionMinimum_MnReachedCallLimit0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertNotNull(functionMinimum1);
      assertFalse(linkedList0.contains(minimumState0));
      assertFalse(list0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2403.0642, functionMinimum1.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 1.0;
      int int1 = 1985;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      double double1 = (-2436.395322529);
      doubleArray0[4] = double1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1985.0, (-2436.395322529)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int1 == int0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1985.0, (-2436.395322529)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinimumError minimumError0 = minimumSeed0.error();
      assertFalse(int0 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int1 == int0);
      assertNotNull(minimumError0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1985.0, (-2436.395322529)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      FunctionGradient functionGradient0 = null;
      int int2 = (-2881);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, doubleArray0[2], int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotEquals(double0, double1, 0.01);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertNotNull(minimumState1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1985.0, (-2436.395322529)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minimumState1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FunctionMinimum functionMinimum0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "4tLz$lKy[n\"l~";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("4tLz$lKy[n\"l~", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("4tLz$lKy[n\"l~", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("4tLz$lKy[n\"l~", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("4tLz$lKy[n\"l~", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      
      MinosError minosError0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1630;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 0.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double1 = (-765.3);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(1630.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals((-765.3), functionMinimum0.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum0.fval(), 0.01);
      assertEquals(1630, functionMinimum0.nfcn());
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotNull(list0);
      assertFalse(list0.contains(minimumState0));
      assertEquals(1630.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals((-765.3), functionMinimum0.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum0.fval(), 0.01);
      assertEquals(1630, functionMinimum0.nfcn());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, int0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertNotNull(functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      assertEquals(1630.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals((-765.3), functionMinimum0.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum0.fval(), 0.01);
      assertEquals(1630, functionMinimum0.nfcn());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(functionMinimum1.isValid());
      assertEquals(1630, functionMinimum1.nfcn());
      assertEquals(1630.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum1.fval(), 0.01);
      assertEquals(1630.0, functionMinimum1.edm(), 0.01);
      
      String string0 = MnPrint.toString(functionMinimum1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertNotNull(string0);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertFalse(list0.contains(minimumState0));
      assertEquals(1630.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals((-765.3), functionMinimum0.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum0.fval(), 0.01);
      assertEquals(1630, functionMinimum0.nfcn());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(functionMinimum1.isValid());
      assertEquals(1630, functionMinimum1.nfcn());
      assertEquals(1630.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(1630.0, functionMinimum1.fval(), 0.01);
      assertEquals(1630.0, functionMinimum1.edm(), 0.01);
      
      int int1 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotNull(mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertNotNull(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      String string0 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-2170);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.upperNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      
      int int1 = 132;
      ContoursError contoursError0 = new ContoursError(int0, int0, linkedList0, minosError0, minosError0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(contoursError0);
      assertEquals(0, linkedList0.size());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertEquals((-2170), contoursError0.ypar());
      assertEquals((-2170), contoursError0.xpar());
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals(0.0, contoursError0.ymin(), 0.01);
      assertEquals(132, contoursError0.nfcn());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0, int0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      String string0 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\ncovariance matrix: \nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "Q~/A@JR1X0cr}";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("A@JR1X0cr}", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals("Q~/A@JR1X0cr}", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Q~", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("A@JR1X0cr}", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("Q~/A@JR1X0cr}", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("Q~", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      
      int int0 = 1027;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotNull(mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      MnPrint.print((PrintWriter) mockPrintWriter0, mnAlgebraicSymMatrix1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ContoursError contoursError0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = " z8zX$z<+y4.V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[9];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      int int0 = 1;
      MnCross.CrossParLimit mnCross_CrossParLimit0 = null;
      MnCross mnCross0 = new MnCross(double1, mnUserParameterState0, int0);
      assertEquals(double1, double0, 0.01);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertEquals(double1, double0, 0.01);
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertEquals(2, minosError0.nfcn());
      assertTrue(minosError0.isValid());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperNewMin());
      
      String string1 = MnPrint.toString(minosError0);
      assertEquals(double1, double0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertEquals(2, minosError0.nfcn());
      assertTrue(minosError0.isValid());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperNewMin());
      assertEquals("\nMinos # of function calls: 2\n# ext. ||   name    || value@min ||  negative || positive  \n   1||        p1||   1.00000||  -2.00000||   2.00000\n\n", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = null;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, functionMinimum0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnAlgebraicSymMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 1;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 0.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      String string0 = MnPrint.toString(minimumState0);
      assertNotNull(string0);
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 0.00000\nminimum internal state vector: LAVector parameters:\n\n0.00000 \n\nminimum internal gradient vector: LAVector parameters:\n\n0.00000 \n\n\n", string0);
      
      MnCross mnCross0 = null;
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(1, minosError0.parameter());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MinosError", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "f(/^c0gNg-RKG#Z!9(s";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string1 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) string0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string1, objectArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(printWriter0);
      assertNotSame(string0, string1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(string1, string0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertNotNull(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnPrint.print(printWriter0, mnUserParameters0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(string1, string0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(2, objectArray0.length);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PrintWriter printWriter0 = null;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      String string0 = MnPrint.toString(mnGlobalCorrelationCoeff0);
      assertNotNull(string0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals("\nMnGlobalCorrelationCoeff: \n\n", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserParameterState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-902);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = 1.0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0), (-902.0), 1.0, (-902.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, mnUserParameters0.variableParameters());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0), (-902.0), 1.0, (-902.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = null;
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0), (-902.0), 1.0, (-902.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {(-902.0), (-902.0), (-902.0), (-902.0), 1.0, (-902.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, mnUserParameters0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(6, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertTrue(minosError0.atLowerMaxFcn());
      assertEquals((-1804), minosError0.nfcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals((-902.0), minosError0.min(), 0.01);
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals((-902), minosError0.parameter());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PrintWriter printWriter0 = null;
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnGlobalCorrelationCoeff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      int int0 = (-205);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.add(point0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(linkedList0, linkedList0).when(contoursError0).points();
      doReturn(minosError0).when(contoursError0).xMinosError();
      doReturn((double)int0).when(contoursError0).xmin();
      doReturn(minosError0).when(contoursError0).yMinosError();
      doReturn(double0).when(contoursError0).ymin();
      MnPrint.print(printWriter0, contoursError0);
      assertTrue(linkedList0.contains(point0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = ":iGf7T5/noLn;V7b3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 818.140717538254;
      doubleArray0[1] = double1;
      double double2 = 417.20666987578096;
      doubleArray0[2] = double2;
      double double3 = (-14.76);
      doubleArray0[3] = double3;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      int int0 = 0;
      mnUserParameters0.setPrecision(double0);
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      double[] doubleArray1 = mnUserParameters0.errors();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      mnUserParameters0.setUpperLimit(int0, double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double0, double3, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 818.140717538254, 417.20666987578096, (-14.76)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, mnUserParameters0.variableParameters());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 1444.45;
      double[] doubleArray0 = new double[1];
      double double1 = (-306.0);
      doubleArray0[0] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/PDHkfrnsOt8G3");
      MnCross mnCross0 = new MnCross();
      assertNotNull(mnCross0);
      
      double[] doubleArray1 = mnUserParameterState0.params();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      double double2 = (-587.152804);
      String string0 = "";
      String string1 = "PDHkfrnsOt8G3";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      
      char char0 = '\'';
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 0;
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals(2, mnUserCovariance0.nrow());
      assertEquals(2, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n   0.00000    0.00000 \n   0.00000    0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN NaN \nNaN NaN \n", string0);
      
      int int1 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 293.04202616;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(minimumState0);
      
      double double1 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 2338;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertNotNull(functionMinimum0);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(2338.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      String string0 = "";
      mnUserTransformation0.add(string0, doubleArray0[3]);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertNotNull(list0);
      assertFalse(list0.contains(minimumState0));
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(2338.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, doubleArray0[4]);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertNotNull(functionMinimum1);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(2338.0, functionMinimum1.errorDef(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      
      String string1 = MnPrint.toString(functionMinimum1);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(2338.0, functionMinimum1.errorDef(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      
      int int1 = (-6);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertFalse(int1 == int0);
      assertNotNull(mnUserCovariance0);
      assertEquals((-6), mnUserCovariance0.nrow());
      assertEquals((-6), mnUserCovariance0.ncol());
      
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      assertFalse(int1 == int0);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertNotNull(mnUserCovariance1);
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      assertEquals((-6), mnUserCovariance0.nrow());
      assertEquals((-6), mnUserCovariance0.ncol());
      assertEquals((-6), mnUserCovariance1.ncol());
      assertEquals((-6), mnUserCovariance1.nrow());
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      double double0 = 3039.579222842137;
      FunctionMinimum functionMinimum2 = new FunctionMinimum(minimumSeed0, linkedList0, double0);
      assertFalse(int0 == int1);
      assertFalse(functionMinimum2.equals((Object)functionMinimum0));
      assertFalse(functionMinimum2.equals((Object)functionMinimum1));
      assertNotNull(functionMinimum2);
      assertFalse(linkedList0.contains(minimumState0));
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(3039.579222842137, functionMinimum2.errorDef(), 0.01);
      
      List<MinimumState> list1 = functionMinimum2.states();
      assertFalse(int0 == int1);
      assertFalse(functionMinimum2.equals((Object)functionMinimum0));
      assertFalse(functionMinimum2.equals((Object)functionMinimum1));
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(functionMinimum2, functionMinimum0);
      assertNotSame(functionMinimum2, functionMinimum1);
      assertFalse(linkedList0.contains(minimumState0));
      assertFalse(list1.contains(minimumState0));
      assertArrayEquals(new double[] {2338.0, 2338.0, 2338.0, 2338.0, 2338.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(3039.579222842137, functionMinimum2.errorDef(), 0.01);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      MinimumState minimumState1 = null;
      try {
        minimumState1 = new MinimumState(int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerValid());
      
      MnUserParameterState mnUserParameterState0 = minosError0.upperState();
      assertNotNull(mnUserParameterState0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      
      String string0 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      
      URI uRI0 = null;
      char char0 = 'A';
      MnUserParameters mnUserParameters0 = null;
      double double0 = 882.1;
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      assertNotNull(mnUserParameters1);
      assertEquals(0, mnUserParameters1.variableParameters());
      
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      assertNotNull(mnUserTransformation0);
      assertEquals(0, mnUserParameters1.variableParameters());
      
      List<MinuitParameter> list0 = mnUserTransformation0.parameters();
      assertNotNull(list0);
      assertEquals(0, mnUserParameters1.variableParameters());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals("\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n", string0);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double0 = 255.10816674749;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double0);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      
      String string1 = MnPrint.toString(functionMinimum0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals("\n\nWARNING: Minuit did not converge.\n\n# of function calls: 0\nminimum function value: 0.00000\nminimum edm: 0.00000\nminimum internal state vector: LAVector parameters:\n\n\n\n\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\n\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n\n\nMnGlobalCorrelationCoeff: \n\n\nWARNING: FunctionMinimum is invalid.\n\n", string1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFileOutputStream0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mnUserCovariance0;
      objectArray0[1] = (Object) mnUserTransformation0;
      objectArray0[2] = (Object) mnUserCovariance0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mnUserTransformation0;
      objectArray0[6] = (Object) minimumSeed0;
      objectArray0[7] = (Object) minimumSeed0;
      PrintWriter printWriter0 = mockPrintWriter0.format(string0, objectArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(printWriter0);
      assertNotSame(string0, string1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(string1, string0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      
      MnPrint.print(printWriter0, minimumState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(string1, string0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(8, objectArray0.length);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(255.10816674749, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      double double0 = 1444.45;
      double[] doubleArray0 = new double[3];
      double double1 = (-306.0);
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      
      MnCross mnCross1 = new MnCross();
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(mnCross1);
      
      double double2 = (-587.152804);
      mnUserParameterState0.setLimits(int0, double2, double0);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      
      String string0 = "";
      String string1 = "PDHkfrnsOt8G3";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double0, double1, 0.01);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      
      String string2 = mnUserParameterState0.name(int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertArrayEquals(new double[] {(-306.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertEquals("p0", string2);
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      double double0 = 1444.45;
      double[] doubleArray0 = new double[3];
      double double1 = (-306.0);
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/PDHkfrnsOt8G3");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      double double2 = (-587.152804);
      mnUserParameterState0.setLimits(int0, double2, double0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      String string0 = "";
      String string1 = "PDHkfrnsOt8G3";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      char char0 = '\'';
      mockPrintWriter0.print(char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, minosError0.nfcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      
      String string2 = mnUserParameterState0.name(int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals("p1", string2);
      
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int1 = 0;
      ContoursError contoursError0 = new ContoursError(int0, int0, linkedList0, minosError0, minosError0, int1);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(int1 == int0);
      assertNotNull(contoursError0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, minosError0.nfcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(0, linkedList0.size());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(1, contoursError0.xpar());
      assertEquals(1444.45, contoursError0.ymin(), 0.01);
      assertEquals(1444.45, contoursError0.xmin(), 0.01);
      assertEquals(0, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, contoursError0);
      assertFalse(int0 == int1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/PDHkfrnsOt8G3", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("PDHkfrnsOt8G3", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(2, minosError0.nfcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1444.45, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atUpperMaxFcn());
      assertEquals(0, linkedList0.size());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(1, contoursError0.xpar());
      assertEquals(1444.45, contoursError0.ymin(), 0.01);
      assertEquals(1444.45, contoursError0.xmin(), 0.01);
      assertEquals(0, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      
      String string3 = MnPrint.toString(mnUserParameterState0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertArrayEquals(new double[] {(-306.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(3, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||   -306.000 || no\n     1 ||        p1 ||  limited ||    1.00000 ||    1.00000\n     2 ||        p2 ||   free   ||    1.00000 ||    1.00000\n\n\n\n\n", string3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      
      int int0 = 1857;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 1.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertFalse(linkedList0.contains(minimumState0));
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MinimumState minimumState1 = functionMinimum0.state();
      assertNotNull(minimumState1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      String string0 = MnPrint.toString(minimumState1);
      assertNotNull(string0);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      String string1 = MnPrint.toString(minimumState1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertNotSame(string1, string0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[4] = double0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockPrintWriter0);
      assertTrue(linkedList0.contains(minimumState0));
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnGlobalCorrelationCoeff0);
      assertTrue(string0.equals((Object)string1));
      assertSame(minimumState0, minimumState1);
      assertSame(minimumState1, minimumState0);
      assertNotSame(string0, string1);
      assertTrue(linkedList0.contains(minimumState0));
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1857, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.edm(), 0.01);
      
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(contoursError0).nfcn();
      doReturn((List) null).when(contoursError0).points();
      doReturn((MinosError) null).when(contoursError0).xMinosError();
      doReturn(0.0).when(contoursError0).xmin();
      doReturn((MinosError) null).when(contoursError0).yMinosError();
      doReturn(0.0).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotNull(mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      String string0 = MnPrint.toString(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotNull(string0);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      assertEquals("LASymMatrix parameters:\n\n", string0);
      
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      assertNotNull(mnAlgebraicVector0);
      
      String string1 = MnPrint.toString(mnAlgebraicVector0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("LAVector parameters:\n\n\n", string1);
      
      String string2 = mnAlgebraicSymMatrix0.toString();
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("LASymMatrix parameters:\n\n", string2);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      
      String string3 = MnPrint.toString(mnUserCovariance0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals("\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n", string3);
      
      int int1 = 1250;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = new MnAlgebraicSymMatrix(int1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertNotNull(mnAlgebraicSymMatrix2);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix3 = mnAlgebraicSymMatrix2.clone();
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix0));
      assertNotNull(mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      MnPrint.toString(mnAlgebraicSymMatrix3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      String string0 = "BasicMinimumError inversion fails; return diagonal matrix.";
      Object[] objectArray0 = new Object[5];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      objectArray0[0] = (Object) mockPrintWriter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(string0, objectArray0);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(5, objectArray0.length);
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = " z8zX$z<+y4.V";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" z8zX$z<+y4.V");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-123);
      byteArray0[0] = byte0;
      byte byte1 = (byte)32;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-128);
      byteArray0[2] = byte2;
      byte byte3 = (byte)49;
      byteArray0[3] = byte3;
      byte byte4 = (byte)1;
      byteArray0[4] = byte4;
      byte byte5 = (byte)38;
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)32, (byte) (-128), (byte)49, (byte)1, (byte)38}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      int int0 = 1;
      MnCross.CrossParLimit mnCross_CrossParLimit0 = null;
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossParLimit0);
      assertNotNull(mnCross0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(minosError0.isValid());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertTrue(minosError0.atLowerLimit());
      assertTrue(minosError0.atUpperLimit());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerMaxFcn());
      assertEquals(1.0, minosError0.min(), 0.01);
      assertEquals(2, minosError0.nfcn());
      assertFalse(minosError0.upperValid());
      
      String string1 = MnPrint.toString(minosError0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(2, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(minosError0.isValid());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertTrue(minosError0.atLowerLimit());
      assertTrue(minosError0.atUpperLimit());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerMaxFcn());
      assertEquals(1.0, minosError0.min(), 0.01);
      assertEquals(2, minosError0.nfcn());
      assertFalse(minosError0.upperValid());
      assertEquals("\nMinos # of function calls: 2\nMinos error is not valid.\nlower Minos error is not valid.\nupper Minos error is not valid.\nMinos error is lower limit of parameter 1\nMinos error is upper limit of parameter 1\n# ext. ||   name    || value@min ||  negative || positive  \n   1||        p1||   1.00000||  -1.00000||   1.00000\n\n", string1);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double0);
      assertEquals(double0, double1, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(double0, double1, 0.01);
      assertNotSame(string0, string1);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
  }
}
