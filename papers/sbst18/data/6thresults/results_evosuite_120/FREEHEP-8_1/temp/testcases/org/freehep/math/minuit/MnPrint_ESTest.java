/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:55:34 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.freehep.math.minuit.ContoursError;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MinosError;
import org.freehep.math.minuit.MinuitParameter;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnGlobalCorrelationCoeff;
import org.freehep.math.minuit.MnPrint;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.freehep.math.minuit.Point;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnPrint_ESTest extends MnPrint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "%=E|fQ8g?#lX2#IC";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[2] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      double double3 = 1.0;
      mnUserParameters0.setUpperLimit(int0, double3);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string1 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n", string1);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(string1, string0);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      MnPrint.print(printWriter0, mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[1] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      List<MinuitParameter> list0 = mnUserParameters0.parameters();
      assertNotNull(list0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      mnUserParameters0.removeLimits(int0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double3 = 1.0;
      mnUserParameters0.setUpperLimit(int0, double3);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n\n\n", string0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      double double4 = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      int int1 = 2132052140;
      MnCross.CrossParLimit mnCross_CrossParLimit0 = new MnCross.CrossParLimit();
      assertNotNull(mnCross_CrossParLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int1, mnCross_CrossParLimit0);
      assertNotNull(mnCross0);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MinosError minosError0 = new MinosError(int0, double4, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.isValid());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.lowerValid());
      assertEquals((-30863016), minosError0.nfcn());
      assertTrue(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      assertTrue(minosError0.atLowerLimit());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 1;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Point> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int1 = (-1170);
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(int0, int1).when(list0).size();
      double double0 = 1063.0;
      MnCross mnCross0 = new MnCross(int0);
      assertNotNull(mnCross0);
      assertFalse(int0 == int1);
      
      MnUserParameterState mnUserParameterState0 = null;
      int int2 = (-2691);
      MnCross.CrossParLimit mnCross_CrossParLimit0 = new MnCross.CrossParLimit();
      assertNotNull(mnCross_CrossParLimit0);
      
      MnCross mnCross1 = new MnCross(mnUserParameterState0, int2, mnCross_CrossParLimit0);
      assertNotNull(mnCross1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotNull(minosError0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atUpperLimit());
      assertEquals((-2690), minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertEquals(1063.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      
      double double1 = 1063.0;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(list0).when(contoursError0).points();
      doReturn(minosError0).when(contoursError0).xMinosError();
      doReturn((double)int2).when(contoursError0).xmin();
      doReturn(minosError0).when(contoursError0).yMinosError();
      doReturn(double1).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 0;
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      int int1 = 1;
      double double0 = (-1918.383007015);
      int int2 = 1;
      Iterator<Point> iterator0 = (Iterator<Point>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      int int3 = 1786;
      int int4 = (-336);
      List<Point> list1 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(int2, int3, int4).when(list1).size();
      String string0 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string0);
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      String string1 = "{0";
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, double0).when(minosError0).min();
      doReturn(point0, point0).when(minosError0).range();
      doReturn(string1, string1).when(minosError0).toString();
      int int5 = 1;
      ContoursError contoursError0 = new ContoursError(int2, int2, list1, minosError0, minosError0, int5);
      assertNotNull(contoursError0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      assertEquals(1, contoursError0.xpar());
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals((-1918.383007015), contoursError0.ymin(), 0.01);
      
      Point point1 = contoursError0.yRange();
      assertEquals(0.0, point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      assertNotNull(point1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      assertEquals(1, contoursError0.xpar());
      assertEquals((-1918.383007015), contoursError0.ymin(), 0.01);
      assertEquals((-1918.383007015), contoursError0.xmin(), 0.01);
      assertSame(point1, point0);
      assertNotSame(string1, string0);
      
      Point point2 = contoursError0.yRange();
      assertEquals(0.0, point2.second, 0.01);
      assertEquals(0.0, point2.first, 0.01);
      assertNotNull(point2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      assertEquals(1, contoursError0.xpar());
      assertEquals((-1918.383007015), contoursError0.ymin(), 0.01);
      assertEquals((-1918.383007015), contoursError0.xmin(), 0.01);
      assertSame(point2, point1);
      assertSame(point2, point0);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 138;
      int int1 = 1;
      int int2 = (-371);
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MinosError minosError0 = null;
      int int3 = 1;
      ContoursError contoursError0 = new ContoursError(int1, int2, linkedList0, minosError0, minosError0, int3);
      assertNotNull(contoursError0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.xpar());
      assertEquals((-371), contoursError0.ypar());
      
      List<Point> list0 = contoursError0.points();
      assertNotNull(list0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.xpar());
      assertEquals((-371), contoursError0.ypar());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      double double0 = 2.0;
      ContoursError contoursError1 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError1).nfcn();
      doReturn(list0, list0).when(contoursError1).points();
      doReturn(minosError0).when(contoursError1).xMinosError();
      doReturn(double0).when(contoursError1).xmin();
      doReturn(minosError0).when(contoursError1).yMinosError();
      doReturn((double)int0).when(contoursError1).ymin();
      MnPrint.print(printWriter0, contoursError1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(contoursError0.equals((Object)contoursError1));
      assertEquals(0, linkedList0.size());
      assertEquals(1, contoursError0.nfcn());
      assertEquals(1, contoursError0.xpar());
      assertEquals((-371), contoursError0.ypar());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      int int4 = 1;
      Iterator<Point> iterator0 = (Iterator<Point>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      int int5 = 2;
      List<Point> list1 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0, (Iterator) null).when(list1).iterator();
      doReturn(int3, int5, int1, 0).when(list1).size();
      double double1 = 157.80245;
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      Point point1 = null;
      String string0 = "";
      String string1 = "";
      MinosError minosError1 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      doReturn((double)int1, double1).when(minosError1).min();
      doReturn(point0, point1).when(minosError1).range();
      doReturn(string0, string1).when(minosError1).toString();
      int int6 = 1;
      ContoursError contoursError2 = new ContoursError(int4, int4, list1, minosError1, minosError1, int6);
      assertNotNull(contoursError2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int3 == int0);
      assertFalse(contoursError2.equals((Object)contoursError1));
      assertFalse(contoursError2.equals((Object)contoursError0));
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, contoursError2.xpar());
      assertEquals(1.0, contoursError2.xmin(), 0.01);
      assertEquals(1, contoursError2.nfcn());
      assertEquals(1, contoursError2.ypar());
      assertEquals(157.80245, contoursError2.ymin(), 0.01);
      
      Point point2 = contoursError2.yRange();
      assertEquals(0.0, point2.first, 0.01);
      assertEquals(0.0, point2.second, 0.01);
      assertNotNull(point2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int3 == int0);
      assertFalse(contoursError2.equals((Object)contoursError1));
      assertFalse(contoursError2.equals((Object)contoursError0));
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, contoursError2.xpar());
      assertEquals(1, contoursError2.nfcn());
      assertEquals(157.80245, contoursError2.xmin(), 0.01);
      assertEquals(1, contoursError2.ypar());
      assertEquals(157.80245, contoursError2.ymin(), 0.01);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(contoursError2, contoursError0);
      assertSame(point2, point0);
      
      Point point3 = contoursError2.yRange();
      assertNull(point3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int5);
      assertFalse(int3 == int0);
      assertFalse(contoursError2.equals((Object)contoursError1));
      assertFalse(contoursError2.equals((Object)contoursError0));
      assertFalse(int4 == int5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, contoursError2.xpar());
      assertEquals(1, contoursError2.nfcn());
      assertEquals(157.80245, contoursError2.xmin(), 0.01);
      assertEquals(1, contoursError2.ypar());
      assertEquals(157.80245, contoursError2.ymin(), 0.01);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(contoursError2, contoursError0);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 2132052140;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Point> list0 = null;
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(linkedList0).when(contoursError0).points();
      doReturn(minosError0).when(contoursError0).xMinosError();
      doReturn((double)int0).when(contoursError0).xmin();
      doReturn(minosError0).when(contoursError0).yMinosError();
      doReturn((double)int0).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[1] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      List<MinuitParameter> list0 = mnUserParameters0.parameters();
      assertNotNull(list0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      mnUserParameters0.removeLimits(int0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = "RO6M)nR>,QZ";
      double double3 = (-1777.8786125570846);
      double double4 = 138.16227280696;
      mnUserParameters0.add(string0, double2, double3, double4, double1);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double1, double3, 0.01);
      assertEquals(double1, double0, 0.01);
      assertNotEquals(double1, double4, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double4, 0.01);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double5 = (-9.512665718113471);
      mnUserParameters0.setUpperLimit(int0, double5);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string1 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", string1);
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string1);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", mockFile0.getName());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string2 = "})tW<wIdDtC>";
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertNotNull(mockFile1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", mockFile0.getName());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/evosuite_6th/\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n/})tW<wIdDtC>", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("/home/evosuite_6th/\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.162 ||    138.162\n     2 ||        p2 ||   free   ||    0.00000 || no\n     3 || RO6M)nR>,QZ ||   free   ||    138.162 || no\n\n\n", mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.exists());
      assertEquals("})tW<wIdDtC>", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(4, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.16227280696, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, string2);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // })tW<wIdDtC>
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      int int0 = (-2787);
      double double0 = 5.9604644775390625E-8;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      int int1 = (-776);
      MnCross.CrossNewMin mnCross_CrossNewMin0 = new MnCross.CrossNewMin();
      assertNotNull(mnCross_CrossNewMin0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int1, mnCross_CrossNewMin0);
      assertNotNull(mnCross0);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.upperNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals((-2787), minosError0.parameter());
      assertEquals((-1552), minosError0.nfcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(5.9604644775390625E-8, minosError0.min(), 0.01);
      assertTrue(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minosError0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertEquals("\nMnUserCovariance: \n\n   0.00000 \n\nMnUserCovariance parameter correlations: \n\nNaN \n", string0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      
      int int1 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      String string1 = MnPrint.toString(mnAlgebraicVector0);
      assertNotNull(string1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("LAVector parameters:\n\n0.00000 \n", string1);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(string1, string0);
      
      String string2 = MnPrint.toString(mnAlgebraicVector0);
      assertNotNull(string2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("LAVector parameters:\n\n0.00000 \n", string2);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int2 = 1107;
      MnAlgebraicVector mnAlgebraicVector2 = new MnAlgebraicVector(int2);
      assertNotNull(mnAlgebraicVector2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      
      double double0 = (-319.4452854745);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector2, mnAlgebraicVector1, double0);
      assertNotNull(minimumParameters0);
      assertFalse(int1 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      
      MinimumError.MnInvertFailed minimumError_MnInvertFailed0 = new MinimumError.MnInvertFailed();
      assertNotNull(minimumError_MnInvertFailed0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnInvertFailed0);
      assertNotNull(minimumError0);
      assertFalse(int1 == int2);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      assertFalse(int1 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector2));
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double0, int1);
      assertNotNull(minimumState0);
      assertFalse(int1 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {1.0, 1.0, (-319.4452854745), (-319.4452854745), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertFalse(int1 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      assertArrayEquals(new double[] {1.0, 1.0, (-319.4452854745), (-319.4452854745), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = (-1.0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double1);
      assertNotNull(functionMinimum0);
      assertFalse(int1 == int2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector2));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-319.4452854745), functionMinimum0.fval(), 0.01);
      assertEquals((-1.0), functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(1, functionMinimum0.nfcn());
      assertEquals((-319.4452854745), functionMinimum0.edm(), 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-319.4452854745), (-319.4452854745), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[2] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      double double3 = 1.0;
      mnUserParameters0.setUpperLimit(int0, double3);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n", string0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnPrint.print(printWriter0, minimumState0);
      int int1 = 1;
      List<Point> list0 = null;
      int int2 = (-2700);
      int int3 = 0;
      MnCross mnCross0 = new MnCross(int3);
      assertNotNull(mnCross0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      MinosError minosError0 = new MinosError(int2, double2, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(138.16227280696, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.nfcn());
      assertEquals((-2700), minosError0.parameter());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      
      ContoursError contoursError0 = new ContoursError(int1, int0, list0, minosError0, minosError0, int3);
      assertNotNull(contoursError0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotEquals(double2, double3, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals(138.16227280696, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.nfcn());
      assertEquals((-2700), minosError0.parameter());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.upperValid());
      assertEquals(138.16227280696, contoursError0.xmin(), 0.01);
      assertEquals(138.16227280696, contoursError0.ymin(), 0.01);
      assertEquals(1, contoursError0.ypar());
      assertEquals(1, contoursError0.xpar());
      assertEquals(0, contoursError0.nfcn());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2978;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double0 = (-1247.9);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double0);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      String string0 = functionMinimum0.toString();
      assertNotNull(string0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      String string1 = "# ext. ||   name    ||   type  ||   value   ||  error +/- ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      assertNotNull(mockPrintWriter0);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'c';
      PrintWriter printWriter0 = mockPrintWriter0.append(char0);
      assertNotNull(printWriter0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      MnUserCovariance mnUserCovariance0 = functionMinimum0.userCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      
      MnPrint.print(printWriter0, mnUserCovariance0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertNotSame(string1, string0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertNotNull(list0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(minimumState0));
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, int0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum1);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(2978.0, functionMinimum1.errorDef(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(minimumState0));
      
      String string2 = functionMinimum1.toString();
      assertNotNull(string2);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(2978.0, functionMinimum1.errorDef(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      
      MinimumState minimumState1 = functionMinimum1.state();
      assertNotNull(minimumState1);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(2978.0, functionMinimum1.errorDef(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(minimumState1, minimumState0);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertFalse(list0.contains(minimumState0));
      assertTrue(list0.contains(minimumState1));
      
      // Undeclared exception!
      MnPrint.toString(minimumState1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null, (PrintWriter) null, (PrintWriter) null).when(printWriter0).printf(anyString() , any(java.lang.Object[].class));
      int int0 = 14;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double0 = 138.16227280696;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, int0);
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(int0);
      assertNotNull(functionGradient0);
      
      double double1 = (-1234.7);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double1, int0);
      assertNotNull(minimumState0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = 375.5;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double2);
      assertNotNull(functionMinimum0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double0, double2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertNotEquals(double1, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(138.16227280696, functionMinimum0.edm(), 0.01);
      assertEquals(14, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(375.5, functionMinimum0.errorDef(), 0.01);
      assertEquals(138.16227280696, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, functionMinimum0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[2] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n", string0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 125;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double3 = 0.5;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, double3);
      assertNotNull(minimumParameters0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = 0.0;
      int int1 = 3;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double4, int1);
      assertNotNull(minimumState0);
      assertFalse(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(int1 == int0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertFalse(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(int1 == int0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[2]);
      assertNotNull(functionMinimum0);
      assertFalse(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0.5, functionMinimum0.edm(), 0.01);
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(138.16227280696, functionMinimum0.errorDef(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.5, functionMinimum0.fval(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string1 = MnPrint.toString(functionMinimum0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(int1 == int0);
      assertEquals(0.5, functionMinimum0.edm(), 0.01);
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(138.16227280696, functionMinimum0.errorDef(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.5, functionMinimum0.fval(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(string1, string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string2 = null;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mnUserParameters0;
      objectArray0[1] = (Object) doubleArray0[2];
      objectArray0[2] = (Object) string0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string3 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      objectArray0[3] = object0;
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameters0);
      assertFalse(boolean0 == boolean1);
      assertEquals(227, charArrayWriter0.size());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n", charArrayWriter0.toString());
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      objectArray0[4] = (Object) mnUserParameters0;
      objectArray0[5] = (Object) doubleArray0[2];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertFalse(boolean0 == boolean1);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(491, charArrayWriter0.size());
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   free   ||    0.00000 || no\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", charArrayWriter0.toString());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
      assertFalse(int0 == int1);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.5, functionMinimum0.edm(), 0.01);
      assertEquals(3, functionMinimum0.nfcn());
      assertEquals(138.16227280696, functionMinimum0.errorDef(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.5, functionMinimum0.fval(), 0.01);
      assertEquals(1822, charArrayWriter0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-5.895162311870454);
      boolean boolean0 = true;
      boolean boolean1 = true;
      int int0 = 1;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(minosError0).toString();
      double double1 = 0.0;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(linkedList0, linkedList0).when(contoursError0).points();
      doReturn(minosError0).when(contoursError0).xMinosError();
      doReturn((double)int0).when(contoursError0).xmin();
      doReturn(minosError0).when(contoursError0).yMinosError();
      doReturn(double1).when(contoursError0).ymin();
      String string0 = MnPrint.toString(contoursError0);
      assertNotNull(string0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals("\nContours # of function calls: 1\nMinosError in x: \nnull\nMinosError in y: \nnull\n\n", string0);
      assertEquals(0, linkedList0.size());
      
      int int1 = 1;
      MnCross.CrossNewMin mnCross_CrossNewMin0 = null;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1948;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 0.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {1948.0, 1948.0, 0.0, 1948.0, 1948.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {1948.0, 1948.0, 0.0, 1948.0, 1948.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertNotNull(functionMinimum0);
      assertEquals(1948.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(1948, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertArrayEquals(new double[] {1948.0, 1948.0, 0.0, 1948.0, 1948.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      String string0 = MnPrint.toString(minimumState0);
      assertNotNull(string0);
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      
      MnUserParameterState mnUserParameterState0 = minosError0.upperState();
      assertNotNull(mnUserParameterState0);
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      
      String string1 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string1);
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertNotSame(string1, string0);
      
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnUserParameterState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double0 = (-1247.9);
      String string0 = "# ext. ||   name    ||   type  ||   value   ||  error +/- ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      char char0 = 'c';
      PrintWriter printWriter0 = mockPrintWriter0.append(char0);
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      String string1 = "3ICJ|@_(vYnOK%`Djg-";
      String string2 = MnPrint.toString(minimumState0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 0.00000\nminimum internal state vector: LAVector parameters:\n\n\n\nminimum internal gradient vector: LAVector parameters:\n\n\n\n\n", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int1 = (-669);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals((-669), mnUserCovariance0.ncol());
      assertEquals((-669), mnUserCovariance0.nrow());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserCovariance0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals((-669), mnUserCovariance0.ncol());
      assertEquals((-669), mnUserCovariance0.nrow());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(mockPrintWriter0, printWriter0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = (-371.09);
      doubleArray1[0] = double1;
      double double2 = 0.0;
      doubleArray1[1] = double2;
      MnUserParameterState mnUserParameterState0 = null;
      try {
        mnUserParameterState0 = new MnUserParameterState(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "tdA:h*|0\"7 ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("tdA:h*|0\"7 ", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals("tdA:h*|0\"7 ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("tdA:h*|0\"7 ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("tdA:h*|0\"7 ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      
      String string1 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) string0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(string1, objectArray0);
      assertNotNull(printWriter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("tdA:h*|0\"7 ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("tdA:h*|0\"7 ", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(2, objectArray0.length);
      assertNotSame(string0, string1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(string1, string0);
      assertSame(printWriter0, mockPrintWriter0);
      
      ContoursError contoursError0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, string0, objectArray0);
      assertNotNull(printWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(2, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = 0;
      double double0 = 5790.2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnCross mnCross0 = new MnCross(double0, mnUserParameterState0, int0);
      assertNotNull(mnCross0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.lowerValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertTrue(minosError0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState1 = minosError0.lowerState();
      assertNotNull(mnUserParameterState1);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.lowerValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertTrue(minosError0.isValid());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      double double1 = 1.0;
      mnUserParameters0.setUpperLimit(int0, double1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mnUserParameterState1.globalCC();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertNotEquals(double0, double1, 0.01);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.lowerValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertTrue(minosError0.isValid());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      MnPrint.print(printWriter0, mnGlobalCorrelationCoeff0);
      assertNotEquals(double0, double1, 0.01);
      assertEquals("", stringWriter0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.lowerValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertTrue(minosError0.isValid());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, objectArray0.length);
      assertEquals(1, doubleArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      String string1 = MnPrint.toString(minosError0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotEquals(double0, double1, 0.01);
      assertEquals("\nMinos # of function calls: 0\n# ext. ||   name    || value@min ||  negative || positive  \n   0||        p0||   0.00000||  -0.00000||   0.00000\n\n", string1);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.lowerValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.parameter());
      assertTrue(minosError0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = (-993);
      int int1 = 290;
      MnCross mnCross0 = new MnCross(int1);
      assertNotNull(mnCross0);
      assertFalse(int1 == int0);
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-993), minosError0.parameter());
      assertEquals(580, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals((-993.0), minosError0.min(), 0.01);
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerValid());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "d)pnrL9";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      MinimumState minimumState0 = null;
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[1] = double1;
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = (-1746.0470352177053);
      doubleArray0[3] = double3;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, (-1746.0470352177053)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, (-1746.0470352177053)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double4 = 138.16227280696;
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double4, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(138.16227280696, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, (-1746.0470352177053)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double0 = (-1247.9);
      String string0 = "# ext. ||   name    ||   type  ||   value   ||  error +/- ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      double double1 = 1440.4;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double1);
      assertNotNull(functionMinimum0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1440.4, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(1440.4, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "6p$9C|B";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      double double0 = 474.6510005;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 474.6510005, 0.0, 474.6510005, 0.0, 474.6510005, 474.6510005, 474.6510005, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0, 474.6510005, 0.0, 474.6510005, 0.0, 474.6510005, 474.6510005, 474.6510005, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[6]);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(474.6510005, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertArrayEquals(new double[] {0.0, 474.6510005, 0.0, 474.6510005, 0.0, 474.6510005, 474.6510005, 474.6510005, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      double double0 = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.16227280696;
      doubleArray0[2] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      mnUserParameters0.fix(int0);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string1 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||   fixed  ||    0.00000   ||\n     2 ||        p2 ||   free   ||    138.162 ||    138.162\n\n\n", string1);
      assertEquals(2, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 138.16227280696}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      double double0 = 711.0;
      MnUserParameterState mnUserParameterState0 = null;
      int int1 = (-355);
      MnCross.CrossNewMin mnCross_CrossNewMin0 = new MnCross.CrossNewMin();
      assertNotNull(mnCross_CrossNewMin0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int1, mnCross_CrossNewMin0);
      assertNotNull(mnCross0);
      assertFalse(int1 == int0);
      
      int int2 = (-1036);
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross1 = new MnCross(mnUserParameterState0, int2, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnCross1.equals((Object)mnCross0));
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross1);
      assertNotNull(minosError0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(mnCross0.equals((Object)mnCross1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnCross1.equals((Object)mnCross0));
      assertEquals(711.0, minosError0.min(), 0.01);
      assertTrue(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertEquals((-1391), minosError0.nfcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserParameterState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      long long0 = 0L;
      mockPrintWriter0.print(long0);
      int int0 = (-1562);
      MnUserParameterState mnUserParameterState0 = null;
      MnCross.CrossNewMin mnCross_CrossNewMin0 = new MnCross.CrossNewMin();
      assertNotNull(mnCross_CrossNewMin0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossNewMin0);
      assertNotNull(mnCross0);
      
      MinosError minosError0 = new MinosError(int0, long0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals((-3124), minosError0.nfcn());
      assertFalse(minosError0.lowerValid());
      assertEquals((-1562), minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertTrue(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.upperNewMin());
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1;
      double double0 = 1.0;
      int int1 = 5975;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int1);
      assertNotNull(mnAlgebraicVector0);
      assertFalse(int1 == int0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      
      // Undeclared exception!
      MnPrint.toString(mnAlgebraicVector0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      String string0 = null;
      double double0 = 138.16227280696;
      mnUserParameterState0.add(string0, double0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertEquals("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||      null ||          ||    138.162   ||\n\n\n\n", stringWriter0.toString());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      
      MinimumSeed minimumSeed0 = null;
      List<MinimumState> list0 = null;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, list0, double0);
      assertNotNull(functionMinimum0);
      assertEquals(138.16227280696, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.FunctionMinimum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1276;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      String string0 = mnAlgebraicVector0.toString();
      assertNotNull(string0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      
      String string1 = MnPrint.toString(mnAlgebraicVector0);
      assertNotNull(string1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(string1, string0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string1);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertTrue(string1.equals((Object)string0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertTrue(string1.equals((Object)string0));
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      
      String string2 = mnAlgebraicVector1.toString();
      assertNotNull(string2);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = mnGlobalCorrelationCoeff0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\nMnGlobalCorrelationCoeff: \n\n", string3);
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnGlobalCorrelationCoeff0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector1, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      double double0 = 0.0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, double0, int0);
      assertNotNull(minimumState0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      String string4 = MnPrint.toString(minimumState0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(string2);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      MnPrint.print((PrintWriter) mockPrintWriter1, mnAlgebraicSymMatrix1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = 13;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals(13, mnUserCovariance0.nrow());
      assertEquals(13, mnUserCovariance0.ncol());
      
      String string0 = MnPrint.toString(mnUserCovariance0);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertEquals(13, mnUserCovariance0.nrow());
      assertEquals(13, mnUserCovariance0.ncol());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "g*:[$4Y";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 758;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(758, mnUserCovariance0.ncol());
      assertEquals(758, mnUserCovariance0.nrow());
      
      // Undeclared exception!
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserCovariance0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 593;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      MnPrint.toString(mnAlgebraicSymMatrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "YJ\"Ds]3%";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 1682;
      MnCross mnCross0 = new MnCross();
      assertNotNull(mnCross0);
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.nfcn());
      assertEquals(1682.0, minosError0.min(), 0.01);
      assertEquals(1682, minosError0.parameter());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1682, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MinimumState minimumState0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(minimumState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 0;
      double double0 = 4212.764994085814;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      MnCross mnCross0 = new MnCross(double0, mnUserParameterState0, int0);
      assertNotNull(mnCross0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.upperNewMin());
      assertEquals(0, minosError0.nfcn());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.lowerNewMin());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minosError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MinosError minosError0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 3763;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnAlgebraicSymMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      String string0 = MnPrint.toString(minimumState0);
      assertNotNull(string0);
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 0.00000\nminimum internal state vector: LAVector parameters:\n\n\n\nminimum internal gradient vector: LAVector parameters:\n\n\n\n\n", string0);
      
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 3038;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int0);
      assertNotNull(mnUserCovariance0);
      assertEquals(3038, mnUserCovariance0.ncol());
      assertEquals(3038, mnUserCovariance0.nrow());
      
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      assertNotNull(mnUserCovariance1);
      assertFalse(mnUserCovariance1.equals((Object)mnUserCovariance0));
      assertEquals(3038, mnUserCovariance0.ncol());
      assertEquals(3038, mnUserCovariance0.nrow());
      assertEquals(3038, mnUserCovariance1.ncol());
      assertEquals(3038, mnUserCovariance1.nrow());
      assertNotSame(mnUserCovariance0, mnUserCovariance1);
      assertNotSame(mnUserCovariance1, mnUserCovariance0);
      
      // Undeclared exception!
      MnPrint.toString(mnUserCovariance1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrintWriter printWriter0 = null;
      MnUserParameters mnUserParameters0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      String string0 = "";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, string0, objectArray0);
      assertNotNull(printWriter0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = 3348;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MnPrint.print(printWriter0, mnAlgebraicVector0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals(1, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnAlgebraicSymMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      String string0 = MnPrint.toString(mnUserParameterState0);
      assertNotNull(string0);
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", string0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "LASymMatrix parameters:";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      boolean boolean1 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, boolean1);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      String string1 = "$Tuz;Va";
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) mockFileWriter0;
      objectArray0[3] = (Object) mockFileWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, string1, objectArray0);
      assertNotNull(printWriter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals(5, objectArray0.length);
      assertNotSame(string0, string1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(string1, string0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = 1;
      int int1 = 220;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      
      int int2 = (-879);
      ContoursError contoursError0 = new ContoursError(int0, int1, linkedList0, minosError0, minosError0, int2);
      assertNotNull(contoursError0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, linkedList0.size());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.isValid());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(220, contoursError0.ypar());
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals(0.0, contoursError0.ymin(), 0.01);
      assertEquals(1, contoursError0.xpar());
      assertEquals((-879), contoursError0.nfcn());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff(mnAlgebraicSymMatrix1);
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, mnGlobalCorrelationCoeff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrintWriter printWriter0 = null;
      int int0 = 2;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      double double0 = 825.44423108942;
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, double0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicVector0.clone();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector0, mnAlgebraicVector1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      MinimumError minimumError0 = minimumSeed0.error();
      assertNotNull(minimumError0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      
      double double1 = 5468.5;
      int int1 = (-2018);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, double1, int1);
      assertNotNull(minimumState1);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicVector0.equals((Object)mnAlgebraicVector1));
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, minimumState1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 947;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      char char0 = '.';
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(char0);
      assertNotNull(charArrayWriter1);
      assertEquals(".", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(".", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals(".", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(".", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      MnAlgebraicVector mnAlgebraicVector0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, mnAlgebraicVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      FunctionMinimum functionMinimum0 = null;
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, functionMinimum0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = null;
      // Undeclared exception!
      try { 
        MnPrint.toString(mnGlobalCorrelationCoeff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MinimumSeed minimumSeed0 = null;
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 2274.4;
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(2274.4, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(functionMinimum0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 0;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      double double0 = (-375.498653926);
      double double1 = (-2904.0);
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(linkedList0, linkedList0).when(contoursError0).points();
      doReturn(minosError0).when(contoursError0).xMinosError();
      doReturn(double0).when(contoursError0).xmin();
      doReturn(minosError0).when(contoursError0).yMinosError();
      doReturn(double1).when(contoursError0).ymin();
      MnPrint.print(printWriter0, contoursError0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, linkedList0.size());
      
      int int1 = 1;
      boolean boolean1 = true;
      boolean boolean2 = true;
      Iterator<Point> iterator0 = (Iterator<Point>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      int int2 = 219;
      int int3 = 0;
      Iterator<Point> iterator1 = (Iterator<Point>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      int int4 = 1;
      int int5 = (-1407);
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      double double2 = 249.5;
      double double3 = 0.0;
      Point point0 = new Point(int3, double3);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(point0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      
      String string0 = "N|[!UUu9].++";
      String string1 = "";
      String string2 = "";
      String string3 = null;
      MinosError minosError1 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      doReturn(point0).when(minosError1).range();
      int int6 = 1;
      ContoursError contoursError1 = new ContoursError(int1, int1, list0, minosError1, minosError1, int6);
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertNotNull(contoursError1);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(contoursError1.equals((Object)contoursError0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertEquals(1, contoursError1.xpar());
      assertEquals(1, contoursError1.nfcn());
      assertEquals(1, contoursError1.ypar());
      assertEquals(0.0, contoursError1.ymin(), 0.01);
      assertEquals(0.0, contoursError1.xmin(), 0.01);
      
      Point point1 = contoursError1.yRange();
      assertEquals(0.0, point0.first, 0.01);
      assertEquals(0.0, point0.second, 0.01);
      assertEquals(0.0, point1.first, 0.01);
      assertEquals(0.0, point1.second, 0.01);
      assertNotNull(point1);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(contoursError1.equals((Object)contoursError0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int1);
      assertFalse(int3 == int5);
      assertEquals(1, contoursError1.xpar());
      assertEquals(1, contoursError1.nfcn());
      assertEquals(1, contoursError1.ypar());
      assertEquals(0.0, contoursError1.ymin(), 0.01);
      assertEquals(0.0, contoursError1.xmin(), 0.01);
      assertSame(point0, point1);
      assertSame(point1, point0);
      
      PrintWriter printWriter1 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = point0.second;
      doubleArray0[2] = point0.second;
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mock(MnGlobalCorrelationCoeff.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) null).when(mnGlobalCorrelationCoeff0).globalCC();
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter1, mnGlobalCorrelationCoeff0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPrint", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 138.07097062844437;
      doubleArray0[1] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.07097062844437, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      List<MinuitParameter> list0 = mnUserParameters0.parameters();
      assertNotNull(list0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertArrayEquals(new double[] {0.0, 138.07097062844437, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      mnUserParameters0.removeLimits(int0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.07097062844437, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      mnUserParameters0.setUpperLimit(int0, double2);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.07097062844437, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = mnUserParameters0.toString();
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    138.071** ||    138.071\n     2 ||        p2 ||   free   ||    0.00000 || no\n\n** parameter is at upper limit\n", string0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 138.07097062844437, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PrintWriter printWriter0 = mock(PrintWriter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(contoursError0).nfcn();
      doReturn((List) null).when(contoursError0).points();
      doReturn((MinosError) null).when(contoursError0).xMinosError();
      doReturn(0.0).when(contoursError0).xmin();
      doReturn((MinosError) null).when(contoursError0).yMinosError();
      doReturn(0.0).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.print(printWriter0, contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 116.74378709995229;
      doubleArray0[1] = double2;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 116.74378709995229, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      List<MinuitParameter> list0 = mnUserParameters0.parameters();
      assertNotNull(list0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertArrayEquals(new double[] {0.0, 116.74378709995229, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      mnUserParameters0.removeLimits(int0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 116.74378709995229, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double3 = 1.0;
      mnUserParameters0.setUpperLimit(int0, double3);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 116.74378709995229, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string0 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string0);
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||        p0 ||   free   ||    0.00000 || no\n     1 ||        p1 ||  limited ||    116.744 ||    116.744\n     2 ||        p2 ||   free   ||    0.00000 || no\n\n\n", string0);
      assertEquals(3, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0, 116.74378709995229, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      List<Point> list1 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(list1).iterator();
      doReturn(0, 0, 0).when(list1).size();
      MinosError minosError0 = mock(MinosError.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(minosError0).min();
      doReturn((String) null, (String) null).when(minosError0).toString();
      int int1 = 1216;
      ContoursError contoursError0 = new ContoursError(int0, int0, list1, minosError0, minosError0, int1);
      assertNotNull(contoursError0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals(0.0, contoursError0.ymin(), 0.01);
      assertEquals(1, contoursError0.xpar());
      assertEquals(1216, contoursError0.nfcn());
      assertEquals(1, contoursError0.ypar());
      
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = 118;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumError minimumError0 = new MinimumError(int0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      assertNotNull(functionGradient0);
      
      int int1 = 0;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int1);
      assertNotNull(minimumState0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = MnPrint.toString(minimumState0);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 1063;
      double double0 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = double0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = double0;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 1063.0, 118.0, 0.0, 0.0, 0.0, 118.0, 118.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MnCross.CrossNewMin mnCross_CrossNewMin0 = new MnCross.CrossNewMin();
      assertNotNull(mnCross_CrossNewMin0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossNewMin0);
      assertNotNull(mnCross0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertArrayEquals(new double[] {0.0, 0.0, 1063.0, 118.0, 0.0, 0.0, 0.0, 118.0, 118.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MinosError minosError0 = new MinosError(int2, double0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(9, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertTrue(minosError0.upperNewMin());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertTrue(minosError0.lowerNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(236, minosError0.nfcn());
      assertFalse(minosError0.lowerValid());
      assertEquals(1063, minosError0.parameter());
      assertArrayEquals(new double[] {0.0, 0.0, 1063.0, 118.0, 0.0, 0.0, 0.0, 118.0, 118.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MnPrint.toString(minosError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1063, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      assertNotNull(bufferedWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, string0, objectArray0);
      assertNotNull(printWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(2, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = 0;
      double double0 = 5790.2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      assertNotNull(mnUserParameters0);
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnCross mnCross0 = new MnCross(double0, mnUserParameterState0, int0);
      assertNotNull(mnCross0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MinosError minosError0 = new MinosError(int0, int0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MnUserParameterState mnUserParameterState1 = minosError0.lowerState();
      assertNotNull(mnUserParameterState1);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = mnUserParameterState1.globalCC();
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      MnPrint.print(printWriter0, mnGlobalCorrelationCoeff0);
      assertEquals("", stringWriter0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, mnUserParameterState1.nfcn());
      assertTrue(mnUserParameterState1.isValid());
      assertTrue(mnUserParameterState1.hasCovariance());
      assertFalse(mnUserParameterState1.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState1.edm(), 0.01);
      assertEquals(1, mnUserParameterState1.variableParameters());
      assertFalse(mnGlobalCorrelationCoeff0.isValid());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, objectArray0.length);
      assertEquals(1, doubleArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mnUserParameterState1, mnUserParameterState0);
      
      MnPrint.print(printWriter0, mnUserParameterState0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals("", stringWriter0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, objectArray0.length);
      assertEquals(1, doubleArray0.length);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertNotNull(mnUserTransformation0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double0);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(5790.2, functionMinimum0.errorDef(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertNotNull(list0);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(5790.2, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(list0.contains(minimumState0));
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, double0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum1);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(5790.2, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(5790.2, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(list0.contains(minimumState0));
      
      MinimumState minimumState1 = functionMinimum1.state();
      assertNotNull(minimumState1);
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(5790.2, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(5790.2, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(minimumState1, minimumState0);
      assertFalse(list0.contains(minimumState0));
      assertTrue(list0.contains(minimumState1));
      
      MnPrint.print(printWriter0, minimumState1);
      assertFalse(minimumState0.equals((Object)minimumState1));
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertEquals("", stringWriter0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(5790.2, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertEquals(5790.2, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertFalse(functionMinimum1.isValid());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, objectArray0.length);
      assertEquals(1, doubleArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertNotSame(minimumState1, minimumState0);
      assertFalse(list0.contains(minimumState0));
      assertTrue(list0.contains(minimumState1));
      
      MnPrint.print(printWriter0, minosError0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(1, mnUserParameterState0.variableParameters());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertEquals("", stringWriter0.toString());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.atLowerLimit());
      assertTrue(minosError0.isValid());
      assertTrue(minosError0.lowerValid());
      assertTrue(minosError0.upperValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertEquals(0, minosError0.parameter());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(1, mnUserParameters0.variableParameters());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, objectArray0.length);
      assertEquals(1, doubleArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mnUserParameterState0, mnUserParameterState1);
      
      int int1 = 20;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      assertFalse(int1 == int0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      String string1 = MnPrint.toString(mnAlgebraicSymMatrix1);
      assertNotNull(string1);
      assertFalse(int1 == int0);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1865;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      
      int int1 = (-1896);
      ContoursError contoursError0 = new ContoursError(int0, int0, linkedList0, minosError0, minosError0, int1);
      assertNotNull(contoursError0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, linkedList0.size());
      assertFalse(minosError0.atLowerMaxFcn());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperValid());
      assertEquals(0, minosError0.nfcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertEquals(1865, contoursError0.xpar());
      assertEquals(1865, contoursError0.ypar());
      assertEquals((-1896), contoursError0.nfcn());
      assertEquals(0.0, contoursError0.xmin(), 0.01);
      assertEquals(0.0, contoursError0.ymin(), 0.01);
      
      // Undeclared exception!
      try { 
        contoursError0.xRange();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = (-5.895162311870454);
      boolean boolean0 = true;
      boolean boolean1 = true;
      int int0 = 16;
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      List<Point> list1 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      assertNotNull(mnUserParameters0);
      assertEquals(0, mnUserParameters0.variableParameters());
      
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      assertNotNull(mnUserCovariance0);
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      
      MnCross.CrossFcnLimit mnCross_CrossFcnLimit0 = new MnCross.CrossFcnLimit();
      assertNotNull(mnCross_CrossFcnLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int0, mnCross_CrossFcnLimit0);
      assertNotNull(mnCross0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      
      MinosError minosError0 = new MinosError(int0, double0, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertEquals(0, mnUserCovariance0.ncol());
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertTrue(mnUserParameterState0.hasCovariance());
      assertTrue(mnUserParameterState0.isValid());
      assertFalse(minosError0.lowerNewMin());
      assertEquals(32, minosError0.nfcn());
      assertFalse(minosError0.atUpperLimit());
      assertEquals(16, minosError0.parameter());
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.lowerValid());
      assertEquals((-5.895162311870454), minosError0.min(), 0.01);
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.upperNewMin());
      assertTrue(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atUpperMaxFcn());
      
      double double1 = 1288.9985;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int0).when(contoursError0).nfcn();
      doReturn(minosError0).when(contoursError0).xMinosError();
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "pmKLeg6sqIh";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = "";
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnGlobalCorrelationCoeff mnGlobalCorrelationCoeff0 = new MnGlobalCorrelationCoeff(mnAlgebraicSymMatrix0);
      assertNotNull(mnGlobalCorrelationCoeff0);
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      
      String string2 = MnPrint.toString(mnGlobalCorrelationCoeff0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\nMnGlobalCorrelationCoeff: \n\n", string2);
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      String string3 = MnPrint.toString(mnAlgebraicVector0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LAVector parameters:\n\n\n", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      char char0 = 'm';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mnAlgebraicVector0;
      objectArray0[1] = (Object) mnGlobalCorrelationCoeff0;
      objectArray0[2] = (Object) string2;
      PrintWriter printWriter0 = mockPrintWriter0.format(string2, objectArray0);
      assertNotNull(printWriter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(mnGlobalCorrelationCoeff0.isValid());
      assertEquals(4, objectArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(printWriter0, mockPrintWriter0);
      
      PrintWriter printWriter1 = mockPrintWriter0.append(char0);
      assertNotNull(printWriter1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) char0;
      int int1 = 1;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(int1);
      assertNotNull(mnUserCovariance0);
      assertFalse(int1 == int0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      
      MnPrint.print(printWriter1, mnUserCovariance0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(1, mnUserCovariance0.ncol());
      assertEquals(1, mnUserCovariance0.nrow());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      
      MnPrint.print(printWriter1, mnAlgebraicVector0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      
      String string4 = MnPrint.toString(mnAlgebraicVector0);
      assertNotNull(string4);
      assertFalse(int0 == int1);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("LAVector parameters:\n\n\n", string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      MnPrint.print(printWriter1, mnAlgebraicSymMatrix0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int0 == int1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(printWriter1, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      
      int int2 = 1;
      LinkedList<Point> linkedList0 = new LinkedList<Point>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MinosError minosError0 = new MinosError();
      assertNotNull(minosError0);
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.atUpperLimit());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(0, minosError0.parameter());
      assertFalse(minosError0.upperValid());
      assertFalse(minosError0.atLowerLimit());
      assertFalse(minosError0.isValid());
      assertEquals(0, minosError0.nfcn());
      assertFalse(minosError0.atLowerMaxFcn());
      assertEquals(0.0, minosError0.min(), 0.01);
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerNewMin());
      
      int int3 = 0;
      int int4 = 1;
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(int4);
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      String string5 = MnPrint.toString(mnAlgebraicVector1);
      assertNotNull(string5);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("LAVector parameters:\n\n0.00000 \n", string5);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(contoursError0).nfcn();
      doReturn((List) null).when(contoursError0).points();
      doReturn((MinosError) null).when(contoursError0).xMinosError();
      doReturn(0.0).when(contoursError0).xmin();
      doReturn((MinosError) null).when(contoursError0).yMinosError();
      doReturn(0.0).when(contoursError0).ymin();
      // Undeclared exception!
      try { 
        MnPrint.print((PrintWriter) mockPrintWriter0, contoursError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
      
      MnPrint.print((PrintWriter) mockPrintWriter0, mnUserParameterState0);
      assertEquals("\n\nWARNING: MnUserParameterState is not valid.\n\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\nWARNING: MnUserParameterState is not valid.\n\n", stringWriter0.toString());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(0, mnUserParameterState0.nfcn());
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.isValid());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      
      int int0 = 1;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      int int1 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int1);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, int0);
      assertNotNull(minimumError0);
      
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      assertNotNull(functionGradient0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, int0, int1);
      assertNotNull(minimumState0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      String string0 = MnPrint.toString(minimumState0);
      assertNotNull(string0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertEquals("\nminimum function value: 0.00000\nminimum edm: 1.00000\nminimum internal state vector: LAVector parameters:\n\n0.00000 \n\nminimum internal gradient vector: LAVector parameters:\n\n0.00000 \n\nminimum internal covariance matrix: LASymMatrix parameters:\n\n   0.00000 \n\n\n", string0);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      double[] doubleArray0 = null;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      double double0 = 2338.826147783147;
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = null;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum0);
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertEquals(0, linkedList0.size());
      assertEquals(2338.826147783147, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      int int2 = 95;
      List<Point> list0 = (List<Point>) mock(List.class, new ViolatedAssumptionAnswer());
      double double1 = 3450.301;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertNotNull(mnUserParameterState0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      int int3 = 95;
      MnCross.CrossParLimit mnCross_CrossParLimit0 = new MnCross.CrossParLimit();
      assertNotNull(mnCross_CrossParLimit0);
      
      MnCross mnCross0 = new MnCross(mnUserParameterState0, int3, mnCross_CrossParLimit0);
      assertNotNull(mnCross0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      
      MinosError minosError0 = new MinosError(int0, double1, mnCross0, mnCross0);
      assertNotNull(minosError0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(mnUserParameterState0.isValid());
      assertEquals(0, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertFalse(mnUserParameterState0.hasCovariance());
      assertFalse(mnUserParameterState0.hasGlobalCC());
      assertEquals(0, mnUserParameterState0.variableParameters());
      assertEquals(0.0, mnUserParameterState0.edm(), 0.01);
      assertEquals(190, minosError0.nfcn());
      assertTrue(minosError0.atUpperLimit());
      assertFalse(minosError0.lowerNewMin());
      assertFalse(minosError0.upperNewMin());
      assertFalse(minosError0.lowerValid());
      assertFalse(minosError0.upperValid());
      assertEquals(3450.301, minosError0.min(), 0.01);
      assertFalse(minosError0.isValid());
      assertFalse(minosError0.atUpperMaxFcn());
      assertEquals(1, minosError0.parameter());
      assertFalse(minosError0.atLowerMaxFcn());
      assertTrue(minosError0.atLowerLimit());
      
      double double2 = 2.0;
      ContoursError contoursError0 = mock(ContoursError.class, new ViolatedAssumptionAnswer());
      doReturn(int2).when(contoursError0).nfcn();
      doReturn(minosError0).when(contoursError0).xMinosError();
      // Undeclared exception!
      try { 
        MnPrint.toString(contoursError0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      double double0 = (-1247.9);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, double0);
      assertNotNull(functionMinimum0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      String string0 = functionMinimum0.toString();
      assertNotNull(string0);
      assertEquals("\n\nWARNING: Minuit did not converge.\n\n# of function calls: 0\nminimum function value: 0.00000\nminimum edm: 0.00000\nminimum internal state vector: LAVector parameters:\n\n\n\n\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n\n\nMnUserCovariance: \n\n\nMnUserCovariance parameter correlations: \n\n\n\nMnGlobalCorrelationCoeff: \n\n\nWARNING: FunctionMinimum is invalid.\n\n", string0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      String string1 = "expected distance to the minimum (edm): ";
      char char0 = 'c';
      MnUserCovariance mnUserCovariance0 = functionMinimum0.userCovariance();
      assertNotNull(mnUserCovariance0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, mnUserCovariance0.nrow());
      assertEquals(0, mnUserCovariance0.ncol());
      
      List<MinimumState> list0 = functionMinimum0.states();
      assertNotNull(list0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(minimumState0));
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum1 = new FunctionMinimum(minimumSeed0, list0, int0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum1);
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertFalse(list0.contains(minimumState0));
      
      MinimumState minimumState1 = new MinimumState(char0);
      assertNotNull(minimumState1);
      assertFalse(minimumState1.equals((Object)minimumState0));
      
      String string2 = MnPrint.toString(minimumState1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(minimumState1.equals((Object)minimumState0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(minimumState1, minimumState0);
      
      String string3 = "3ICJ|@_(vYnOK%`Djg-";
      MnUserParameters mnUserParameters0 = functionMinimum1.userParameters();
      assertNotNull(mnUserParameters0);
      assertFalse(minimumState0.equals((Object)minimumState1));
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertFalse(list0.contains(minimumState1));
      
      String string4 = MnPrint.toString(mnUserParameters0);
      assertNotNull(string4);
      assertFalse(minimumState0.equals((Object)minimumState1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(functionMinimum0.equals((Object)functionMinimum1));
      assertFalse(functionMinimum1.equals((Object)functionMinimum0));
      assertEquals("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", string4);
      assertEquals(0, mnUserParameters0.variableParameters());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals((-1247.9), functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(functionMinimum1.isValid());
      assertEquals(0.0, functionMinimum1.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum1.fval(), 0.01);
      assertEquals(0.0, functionMinimum1.edm(), 0.01);
      assertEquals(0, functionMinimum1.nfcn());
      assertNotSame(minimumState0, minimumState1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(functionMinimum0, functionMinimum1);
      assertNotSame(functionMinimum1, functionMinimum0);
      assertFalse(list0.contains(minimumState1));
  }
}
