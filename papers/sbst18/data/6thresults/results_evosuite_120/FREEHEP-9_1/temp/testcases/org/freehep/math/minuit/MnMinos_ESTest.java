/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:31:27 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionMinimum;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumSeed;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnMinos;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnMinos_ESTest extends MnMinos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-27);
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0, int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      double double0 = 405.97498704;
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(405.97498704, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(405.97498704, functionMinimum0.errorDef(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-1752);
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, (double) int0, int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      int int1 = (-925);
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0, int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      
      int int0 = 2610;
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      String string0 = "d;B$s4452d{.";
      mnUserTransformation0.add(string0, int0, int0);
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-13);
      // Undeclared exception!
      try { 
        mnMinos0.upval(int1, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FunctionMinimum functionMinimum0 = null;
      int int0 = 1;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(5, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-3197);
      // Undeclared exception!
      try { 
        mnMinos0.upval(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FunctionMinimum functionMinimum0 = null;
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      int int0 = 336;
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumSeed minimumSeed0 = null;
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 113.434632;
      FunctionMinimum.MnAboveMaxEdm functionMinimum_MnAboveMaxEdm0 = new FunctionMinimum.MnAboveMaxEdm();
      assertNotNull(functionMinimum_MnAboveMaxEdm0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnAboveMaxEdm0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(113.434632, functionMinimum0.errorDef(), 0.01);
      
      int int0 = 0;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(113.434632, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, double0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        mnMinos0.upper(int1, (double) int0, int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(1, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      FCNBase fCNBase0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 1;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 1;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      int int1 = (-1200);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int1);
      assertNotNull(mnMinos0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 691;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      List<MinimumState> list0 = null;
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, list0, int0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum0);
      assertEquals(691.0, functionMinimum0.errorDef(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertEquals(691.0, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.FunctionMinimum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 1239;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1239.0, functionMinimum0.errorDef(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(1239.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      FCNBase fCNBase0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      int int1 = (-2245);
      // Undeclared exception!
      try { 
        mnMinos0.range(int1, (double) int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 1170;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 718;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[4];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(4, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(4, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnStrategy mnStrategy0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-1311);
      // Undeclared exception!
      try { 
        mnMinos0.range(int1, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnStrategy mnStrategy0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      
      int int0 = 582;
      // Undeclared exception!
      try { 
        mnMinos0.range(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(linkedList0.contains(minimumState0));
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      // Undeclared exception!
      try { 
        mnMinos0.range(int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 0;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      FCNBase fCNBase0 = null;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 23;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(23.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(23.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(23.0, functionMinimum0.fval(), 0.01);
      assertEquals(23.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(23, functionMinimum0.nfcn());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-3170);
      // Undeclared exception!
      try { 
        mnMinos0.minos(int1, (double) int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-657);
      // Undeclared exception!
      try { 
        mnMinos0.minos(int1, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 2;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-580);
      // Undeclared exception!
      try { 
        mnMinos0.minos(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      int int0 = (-868);
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = null;
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, doubleArray0[0], functionMinimum_MnReachedCallLimit0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      int int0 = 1;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, double0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, doubleArray0[1], int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      int int0 = 2;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 1268;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(1268.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(1268.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(int1, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnStrategy mnStrategy0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(1, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(1, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FunctionMinimum functionMinimum0 = null;
      int int0 = 0;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(linkedList0.contains(minimumState0));
      
      int int1 = (-21);
      // Undeclared exception!
      try { 
        mnMinos0.loval(int1, (double) int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FCNBase fCNBase0 = null;
      MinimumSeed minimumSeed0 = null;
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      FunctionMinimum.MnReachedCallLimit functionMinimum_MnReachedCallLimit0 = new FunctionMinimum.MnReachedCallLimit();
      assertNotNull(functionMinimum_MnReachedCallLimit0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, double0, functionMinimum_MnReachedCallLimit0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[2];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(2, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(2, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnStrategy mnStrategy0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      
      int int1 = (-145);
      // Undeclared exception!
      try { 
        mnMinos0.loval(int1, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FCNBase fCNBase0 = null;
      FunctionMinimum functionMinimum0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertNotNull(mnMinos0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertTrue(linkedList0.contains(minimumState0));
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0, int0);
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertTrue(mnStrategy0.isMedium());
      assertTrue(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[5];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(5, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(5, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(linkedList0.contains(minimumState0));
      
      String string0 = "";
      mnUserTransformation0.add(string0, int0);
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      boolean boolean0 = linkedList0.add(minimumState0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, doubleArray0[5], int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      MinimumParameters minimumParameters0 = new MinimumParameters(int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      
      FCNBase fCNBase0 = null;
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isMedium());
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, doubleArray0[5], int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FunctionMinimum functionMinimum0 = null;
      int int0 = (-1630);
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0, (double) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnMinos", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[8];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(8, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(8, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(8, doubleArray0.length);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnStrategy mnStrategy0 = new MnStrategy(int0);
      assertNotNull(mnStrategy0);
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(8, doubleArray0.length);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(mnStrategy0.isLow());
      assertEquals(0, mnStrategy0.strategy());
      assertEquals(0.1, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isMedium());
      assertEquals(0.1, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(3, mnStrategy0.hessianNCycles());
      assertEquals(0.5, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.gradientNCycles());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.5, mnStrategy0.hessianStepTolerance(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0, (double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      
      FCNBase fCNBase0 = null;
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertFalse(mnStrategy0.isHigh());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, doubleArray0[4]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        mnMinos0.upper(int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnMinos0.lower(int1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FCNBase fCNBase0 = null;
      int int0 = 1;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, int0);
      assertNotNull(mnMinos0);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertEquals(1.0, functionMinimum0.errorDef(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0, (double) int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(1, mnStrategy0.strategy());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.loval(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 389, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertTrue(mnStrategy0.isMedium());
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upval(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertFalse(mnStrategy0.isLow());
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertFalse(mnStrategy0.isHigh());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.minos(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 389;
      MinimumState minimumState0 = new MinimumState(int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, functionMinimum0.nfcn());
      assertFalse(functionMinimum0.isValid());
      assertEquals(389.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.lower(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 389, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      assertNotNull(mnUserTransformation0);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertNotNull(minimumSeed0);
      
      LinkedList<MinimumState> linkedList0 = new LinkedList<MinimumState>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(minimumState0));
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, linkedList0, int0);
      assertNotNull(functionMinimum0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertFalse(linkedList0.contains(minimumState0));
      
      MnStrategy mnStrategy0 = new MnStrategy();
      assertNotNull(mnStrategy0);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      
      FCNBase fCNBase0 = null;
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0, mnStrategy0);
      assertNotNull(mnMinos0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0.05, mnStrategy0.gradientTolerance(), 0.01);
      assertTrue(mnStrategy0.isMedium());
      assertFalse(mnStrategy0.isHigh());
      assertFalse(mnStrategy0.isLow());
      assertEquals(5, mnStrategy0.hessianNCycles());
      assertEquals(0.3, mnStrategy0.gradientStepTolerance(), 0.01);
      assertEquals(1, mnStrategy0.strategy());
      assertEquals(0.05, mnStrategy0.hessianG2Tolerance(), 0.01);
      assertEquals(0.3, mnStrategy0.hessianStepTolerance(), 0.01);
      assertEquals(2, mnStrategy0.hessianGradientNCycles());
      assertEquals(3, mnStrategy0.gradientNCycles());
      assertFalse(linkedList0.contains(minimumState0));
      
      // Undeclared exception!
      try { 
        mnMinos0.upper(int0, (double) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(int0);
      assertNotNull(mnAlgebraicVector0);
      
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, int0);
      assertNotNull(minimumParameters0);
      
      MinimumState minimumState0 = new MinimumState(minimumParameters0, int0, int0);
      assertNotNull(minimumState0);
      
      double[] doubleArray0 = new double[6];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnUserTransformation0);
      assertEquals(6, doubleArray0.length);
      
      MinimumSeed minimumSeed0 = new MinimumSeed(minimumState0, mnUserTransformation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(minimumSeed0);
      assertEquals(6, doubleArray0.length);
      
      FunctionMinimum functionMinimum0 = new FunctionMinimum(minimumSeed0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(functionMinimum0);
      assertEquals(6, doubleArray0.length);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      MnMinos mnMinos0 = new MnMinos(fCNBase0, functionMinimum0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(mnMinos0);
      assertEquals(6, doubleArray0.length);
      assertTrue(functionMinimum0.isValid());
      assertEquals(0.0, functionMinimum0.errorDef(), 0.01);
      assertEquals(0, functionMinimum0.nfcn());
      assertEquals(0.0, functionMinimum0.edm(), 0.01);
      assertEquals(0.0, functionMinimum0.fval(), 0.01);
      
      // Undeclared exception!
      try { 
        mnMinos0.range(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicVector", e);
      }
  }
}
