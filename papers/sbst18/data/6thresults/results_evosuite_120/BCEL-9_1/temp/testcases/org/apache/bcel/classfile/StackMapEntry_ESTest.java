/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:11:13 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackMapEntry_ESTest extends StackMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4173;
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 250;
      stackMapEntry0.setFrameType(int1);
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(250, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, stackMapTypeArray0.length);
      
      stackMapEntry0.updateByteCodeOffset(int0);
      assertEquals(8346, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(250, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertEquals(1, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 63;
      stackMapEntry0.setByteCodeOffset(int1);
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertNotNull(stackMapEntry0);
      
      int int0 = 69;
      stackMapEntry0.setFrameType(int0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(5, stackMapEntry0.getByteCodeOffset());
      assertEquals(69, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 248;
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(1, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = stackMapEntry0.getMapEntrySize();
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(1, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 0;
      stackMapEntry0.setFrameType(int1);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      int int2 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte byte0 = (byte)63;
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals("(SAME, offset delta=63)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 4173;
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      int int1 = 250;
      stackMapEntry0.setFrameType(int1);
      assertEquals(250, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, stackMapTypeArray0.length);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(250, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertFalse(int0 == int1);
      assertEquals(1, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      int int0 = 127;
      stackMapEntry0.setFrameType(int0);
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(127, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte byte0 = (byte)63;
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 223;
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(223, stackMapEntry0.getByteCodeOffset());
      assertEquals(7, stackMapEntry0.getNumberOfLocals());
      assertEquals(7, stackMapEntry0.getNumberOfStackItems());
      assertEquals(7, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(223, stackMapEntry0.getByteCodeOffset());
      assertEquals(7, stackMapEntry0.getNumberOfLocals());
      assertEquals(7, stackMapEntry0.getNumberOfStackItems());
      assertEquals(7, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte byte0 = (byte) (-6);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(250, stackMapEntry0.getFrameType());
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(250, stackMapEntry0.getFrameType());
      assertEquals("(CHOP 1, offset delta=0)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte byte0 = (byte)64;
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertSame(stackMapTypeArray0, stackMapTypeArray1);
      assertSame(stackMapTypeArray1, stackMapTypeArray0);
      assertEquals(0, stackMapTypeArray0.length);
      assertEquals(0, stackMapTypeArray1.length);
      assertNotNull(stackMapTypeArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 4173;
      StackMapType[] stackMapTypeArray0 = new StackMapType[1];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = stackMapEntry0.getNumberOfStackItems();
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(1, stackMapEntry0.getNumberOfLocals());
      assertEquals(4173, stackMapEntry0.getByteCodeOffset());
      assertEquals(1, stackMapEntry0.getNumberOfStackItems());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-591);
      int int1 = 204;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = stackMapEntry0.getByteCodeOffset();
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals((-1208), int1);
      assertTrue(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-2299);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      assertNotNull(constantPool0);
      
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-2299), stackMapEntry0.getFrameType());
      assertEquals((-2299), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertEquals(2, constantPool0.getLength());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-2299), stackMapEntry0.getFrameType());
      assertEquals((-2299), stackMapEntry0.getByteCodeOffset());
      assertEquals((-2299), stackMapEntry1.getFrameType());
      assertEquals(0, stackMapEntry1.getNumberOfStackItems());
      assertEquals((-2299), stackMapEntry1.getByteCodeOffset());
      assertEquals(0, stackMapEntry1.getNumberOfLocals());
      assertFalse(stackMapEntry1.equals((Object)stackMapEntry0));
      assertNotSame(stackMapEntry0, stackMapEntry1);
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals(0, stackMapTypeArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotNull(stackMapEntry1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 251;
      StackMapType[] stackMapTypeArray0 = null;
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(251, stackMapEntry0.getByteCodeOffset());
      assertNotNull(stackMapEntry0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0, (short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap offset: -1208
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 223;
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapType stackMapType0 = mock(StackMapType.class, new ViolatedAssumptionAnswer());
      doReturn((StackMapType) null, (StackMapType) null, (StackMapType) null, (StackMapType) null, (StackMapType) null).when(stackMapType0).copy();
      stackMapTypeArray0[0] = stackMapType0;
      stackMapTypeArray0[1] = stackMapTypeArray0[0];
      stackMapTypeArray0[2] = stackMapTypeArray0[0];
      stackMapTypeArray0[3] = stackMapTypeArray0[2];
      stackMapTypeArray0[4] = stackMapTypeArray0[3];
      stackMapTypeArray0[5] = stackMapTypeArray0[0];
      stackMapTypeArray0[6] = stackMapTypeArray0[1];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(7, stackMapEntry0.getNumberOfStackItems());
      assertEquals(7, stackMapEntry0.getNumberOfLocals());
      assertEquals(223, stackMapEntry0.getByteCodeOffset());
      assertEquals(7, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapEntry stackMapEntry1 = stackMapEntry0.copy();
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(7, stackMapEntry0.getNumberOfStackItems());
      assertEquals(7, stackMapEntry0.getNumberOfLocals());
      assertEquals(223, stackMapEntry0.getByteCodeOffset());
      assertEquals(7, stackMapEntry1.getNumberOfStackItems());
      assertEquals(7, stackMapEntry1.getNumberOfLocals());
      assertEquals(223, stackMapEntry1.getByteCodeOffset());
      assertEquals(0, stackMapEntry1.getFrameType());
      assertFalse(stackMapEntry1.equals((Object)stackMapEntry0));
      assertNotSame(stackMapEntry0, stackMapEntry1);
      assertNotSame(stackMapEntry1, stackMapEntry0);
      assertEquals(7, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1010);
      StackMapType[] stackMapTypeArray0 = new StackMapType[4];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals((-1010), stackMapEntry0.getFrameType());
      assertEquals(4, stackMapEntry0.getNumberOfLocals());
      assertEquals(4, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-1010), stackMapEntry0.getByteCodeOffset());
      assertEquals(4, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertNotNull(stackMapEntry0);
      
      StackMapType[] stackMapTypeArray0 = new StackMapType[14];
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(14, stackMapEntry0.getNumberOfStackItems());
      assertEquals(14, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapType[] stackMapTypeArray1 = null;
      stackMapEntry0.setTypesOfStackItems(stackMapTypeArray1);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 13;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(13, stackMapEntry0.getFrameType());
      assertEquals(13, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      stackMapEntry0.setTypesOfLocals(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(13, stackMapEntry0.getFrameType());
      assertEquals(13, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 251;
      StackMapType[] stackMapTypeArray0 = null;
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(251, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      stackMapEntry0.setTypesOfLocals(stackMapTypeArray0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(251, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 248;
      stackMapEntry0.updateByteCodeOffset(int1);
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      stackMapEntry0.setByteCodeOffset(int0);
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertNotNull(stackMapEntry0);
      
      int int0 = 896;
      stackMapEntry0.setByteCodeOffset(int0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(896, stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 246;
      StackMapType[] stackMapTypeArray0 = null;
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(246, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(246, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type: 246
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 247;
      StackMapType[] stackMapTypeArray0 = null;
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(247, stackMapEntry0.getByteCodeOffset());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertNotNull(stackMapEntry0);
      
      stackMapEntry0.setByteCodeOffset(int0);
      assertEquals(247, stackMapEntry0.getByteCodeOffset());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte byte0 = (byte)63;
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(63, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(63, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(1, int0);
      
      stackMapEntry0.setByteCodeOffset(int0);
      assertEquals(1, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(1, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 33;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(33, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.setByteCodeOffset(int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap offset: 8257536
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-897);
      StackMapType[] stackMapTypeArray0 = new StackMapType[7];
      StackMapType stackMapType0 = mock(StackMapType.class, new ViolatedAssumptionAnswer());
      stackMapTypeArray0[0] = stackMapType0;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0, (short)0, (short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertNotNull(stackMapEntry0);
      
      int int0 = 2046;
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 248;
      stackMapEntry0.updateByteCodeOffset(int1);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      int int2 = stackMapEntry0.getFrameType();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(251, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      stackMapEntry0.setFrameType(int2);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.setFrameType(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 255;
      StackMapType[] stackMapTypeArray0 = new StackMapType[3];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(3, stackMapEntry0.getNumberOfStackItems());
      assertEquals(3, stackMapEntry0.getNumberOfLocals());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(255, stackMapEntry0.getByteCodeOffset());
      assertEquals(3, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0, (short)0, (short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      int int0 = stackMapEntry0.getMapEntrySize();
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(7, int0);
      
      stackMapEntry0.setByteCodeOffset(int0);
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(7, stackMapEntry0.getByteCodeOffset());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 13;
      int int1 = 254;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int1, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(13, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      stackMapEntry0.setFrameType(int1);
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(254, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      int int2 = stackMapEntry0.getMapEntrySize();
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(254, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(3, int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 488;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
      boolean boolean0 = true;
      StackMapType stackMapType0 = mock(StackMapType.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(stackMapType0).hasIndex();
      stackMapTypeArray0[0] = stackMapType0;
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 247;
      PrivateAccess.setVariable((Class<StackMapEntry>) StackMapEntry.class, stackMapEntry0, "frame_type", (Object) int1);
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, stackMapTypeArray0.length);
      
      int int2 = stackMapEntry0.getMapEntrySize();
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 488;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
      StackMapType stackMapType0 = mock(StackMapType.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(stackMapType0).hasIndex();
      stackMapTypeArray0[0] = stackMapType0;
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 247;
      PrivateAccess.setVariable((Class<StackMapEntry>) StackMapEntry.class, stackMapEntry0, "frame_type", (Object) int1);
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, stackMapTypeArray0.length);
      
      int int2 = stackMapEntry0.getMapEntrySize();
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(4, int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 488;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type: 488
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1208);
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals((-1208), stackMapEntry0.getByteCodeOffset());
      assertEquals((-1208), stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.getMapEntrySize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap frame_type: -1208
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0, (short)0, (short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals("(FULL, offset delta=0)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals("(CHOP 3, offset delta=-8)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 488;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 247;
      PrivateAccess.setVariable((Class<StackMapEntry>) StackMapEntry.class, stackMapEntry0, "frame_type", (Object) int1);
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(6, stackMapTypeArray0.length);
      
      String string0 = stackMapEntry0.toString();
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(247, stackMapEntry0.getFrameType());
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals("(SAME_LOCALS_1_STACK_EXTENDED, offset delta=488, locals={null, null, null, null, null, null}, stack items={null, null, null, null, null, null})", string0);
      assertFalse(int0 == int1);
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = (-1010);
      StackMapType[] stackMapTypeArray0 = new StackMapType[4];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals((-1010), stackMapEntry0.getByteCodeOffset());
      assertEquals(4, stackMapEntry0.getNumberOfStackItems());
      assertEquals(4, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1010), stackMapEntry0.getFrameType());
      assertEquals(4, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals((-1010), stackMapEntry0.getByteCodeOffset());
      assertEquals(4, stackMapEntry0.getNumberOfStackItems());
      assertEquals(4, stackMapEntry0.getNumberOfLocals());
      assertEquals((-1010), stackMapEntry0.getFrameType());
      assertEquals("(UNKNOWN (-1010), offset delta=-1010, locals={null, null, null, null}, stack items={null, null, null, null})", string0);
      assertEquals(4, stackMapTypeArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 13;
      int int1 = 254;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int1, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(13, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      stackMapEntry0.setFrameType(int1);
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(254, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(254, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(254, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 248;
      stackMapEntry0.updateByteCodeOffset(int1);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(248, stackMapEntry0.getByteCodeOffset());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertFalse(int0 == int1);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 13;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(13, stackMapEntry0.getByteCodeOffset());
      assertEquals(13, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = 64;
      PrivateAccess.setVariable((Class<StackMapEntry>) StackMapEntry.class, stackMapEntry0, "frame_type", (Object) int1);
      assertEquals(13, stackMapEntry0.getByteCodeOffset());
      assertEquals(64, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-2184);
      StackMapType[] stackMapTypeArray0 = new StackMapType[3];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(3, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-2184), stackMapEntry0.getByteCodeOffset());
      assertEquals(3, stackMapEntry0.getNumberOfLocals());
      assertEquals((-2184), stackMapEntry0.getFrameType());
      assertEquals(3, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.dump(dataOutputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid Stack map table tag: -2184
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = null;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertNotNull(constantPool0);
      
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, constantArray0.length);
      assertNotNull(stackMapEntry0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte byte0 = (byte) (-1);
      short short0 = (short)1210;
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 3;
      int int1 = 2625;
      StackMapType[] stackMapTypeArray0 = new StackMapType[5];
      int int2 = (-1674);
      Constant[] constantArray0 = new Constant[9];
      byte byte0 = (byte) (-2);
      byte byte1 = (byte)3;
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte byte0 = (byte) (-1);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0, (short)0, (short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertNotNull(stackMapEntry0);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      
      stackMapEntry0.dump(dataOutputStream0);
      assertEquals(255, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte byte0 = (byte) (-5);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertNotNull(stackMapEntry0);
      
      String string0 = stackMapEntry0.toString();
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(251, stackMapEntry0.getFrameType());
      assertEquals("(SAME_EXTENDED, offset delta=0)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = null;
      try {
        stackMapEntry0 = new StackMapEntry(dataInputStream0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid frame type found while parsing stack map table: 177
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte byte0 = (byte) (-9);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte byte0 = (byte)127;
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-2184);
      StackMapType[] stackMapTypeArray0 = new StackMapType[3];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(3, stackMapEntry0.getNumberOfLocals());
      assertEquals((-2184), stackMapEntry0.getByteCodeOffset());
      assertEquals((-2184), stackMapEntry0.getFrameType());
      assertEquals(3, stackMapEntry0.getNumberOfStackItems());
      assertEquals(3, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfStackItems();
      assertEquals(3, stackMapEntry0.getNumberOfLocals());
      assertEquals((-2184), stackMapEntry0.getByteCodeOffset());
      assertEquals((-2184), stackMapEntry0.getFrameType());
      assertEquals(3, stackMapEntry0.getNumberOfStackItems());
      assertSame(stackMapTypeArray0, stackMapTypeArray1);
      assertSame(stackMapTypeArray1, stackMapTypeArray0);
      assertEquals(3, stackMapTypeArray0.length);
      assertEquals(3, stackMapTypeArray1.length);
      assertNotNull(stackMapTypeArray1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = stackMapEntry0.getNumberOfLocals();
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
      
      stackMapEntry0.setNumberOfLocals(int1);
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 488;
      StackMapType[] stackMapTypeArray0 = new StackMapType[6];
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, stackMapTypeArray0, constantPool0);
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertEquals(6, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      StackMapType[] stackMapTypeArray1 = stackMapEntry0.getTypesOfLocals();
      assertEquals(6, stackMapEntry0.getNumberOfLocals());
      assertEquals(488, stackMapEntry0.getFrameType());
      assertEquals(488, stackMapEntry0.getByteCodeOffset());
      assertEquals(6, stackMapEntry0.getNumberOfStackItems());
      assertSame(stackMapTypeArray0, stackMapTypeArray1);
      assertSame(stackMapTypeArray1, stackMapTypeArray0);
      assertEquals(6, stackMapTypeArray0.length);
      assertEquals(6, stackMapTypeArray1.length);
      assertNotNull(stackMapTypeArray1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertNotNull(stackMapEntry0);
      
      // Undeclared exception!
      try { 
        stackMapEntry0.updateByteCodeOffset(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid StackMap offset: -16
         //
         verifyException("org.apache.bcel.classfile.StackMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      stackMapEntry0.accept(emptyVisitor0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte byte0 = (byte) (-8);
      DataInput dataInput0 = mock(DataInput.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(dataInput0).readByte();
      doReturn((short)byte0).when(dataInput0).readShort();
      ConstantPool constantPool0 = mock(ConstantPool.class, new ViolatedAssumptionAnswer());
      StackMapEntry stackMapEntry0 = new StackMapEntry(dataInput0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertNotNull(stackMapEntry0);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantArray0.length);
      assertNotNull(constantPool1);
      
      stackMapEntry0.setConstantPool(constantPool1);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(3, constantPool1.getLength());
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool2 = stackMapEntry0.getConstantPool();
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals((-8), stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(248, stackMapEntry0.getFrameType());
      assertEquals(3, constantPool2.getLength());
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      StackMapType[] stackMapTypeArray0 = new StackMapType[0];
      ConstantPool constantPool0 = null;
      StackMapEntry stackMapEntry0 = new StackMapEntry(int0, int0, stackMapTypeArray0, int0, stackMapTypeArray0, constantPool0);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertEquals(0, stackMapTypeArray0.length);
      assertNotNull(stackMapEntry0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int1);
      assertFalse(int1 == int0);
      
      stackMapEntry0.setNumberOfStackItems(int1);
      assertEquals(0, stackMapEntry0.getNumberOfStackItems());
      assertEquals(0, stackMapEntry0.getFrameType());
      assertEquals(0, stackMapEntry0.getByteCodeOffset());
      assertEquals(0, stackMapEntry0.getNumberOfLocals());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, stackMapTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
  }
}
