/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 30 20:12:42 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.function.UnaryOperator;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.stream.util.EventReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.MapDynamicPropertyHandler;
import org.apache.commons.jxpath.XMLDocumentContainer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueUtils_ESTest extends ValueUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 2368;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertEquals(0, linkedList0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnaryOperator<Container> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        ValueUtils.remove(unaryOperator0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such element at index 1
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      Class<Object> class0 = Object.class;
      Object object0 = PrivateAccess.callMethod((Class<ValueUtils>) ValueUtils.class, valueUtils0, "convert", (Object) valueUtils0, (Class<?>) Object.class, (Object) class0, (Class<?>) Class.class);
      assertSame(valueUtils0, object0);
      assertSame(object0, valueUtils0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = null;
      Object object1 = ValueUtils.getValue(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = null;
      MapDynamicPropertyHandler mapDynamicPropertyHandler0 = new MapDynamicPropertyHandler();
      assertNotNull(mapDynamicPropertyHandler0);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) mapDynamicPropertyHandler0, propertyDescriptor0, (Object) propertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(xMLDocumentContainer0);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) xMLDocumentContainer0, int0, (Object) string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: ftp://ftp.someFakeButWellFormedURL.org/fooExample; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<IndexedPropertyDescriptor> linkedList0 = new LinkedList<IndexedPropertyDescriptor>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-517);
      // Undeclared exception!
      try { 
        ValueUtils.remove(linkedList0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -517, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(xMLDocumentContainer0);
      
      // Undeclared exception!
      try { 
        ValueUtils.isCollection(xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: file:/tmp/foo.bar; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(xMLDocumentContainer0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) xMLDocumentContainer0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: http://www.someFakeButWellFormedURL.org/fooExample; Cannot read XML from: http://www.someFakeButWellFormedURL.org/fooExample; Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(xMLDocumentContainer0);
      
      // Undeclared exception!
      try { 
        ValueUtils.getLength(xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: file://some/fake/but/wellformed/url; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getDynamicPropertyHandler(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getCollectionHint(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      Class<Container>[] classArray0 = (Class<Container>[]) Array.newInstance(Class.class, 1);
      Class<Container> class0 = Container.class;
      String string0 = null;
      try { 
        PrivateAccess.callMethod((Class<ValueUtils>) ValueUtils.class, valueUtils0, "getAccessibleMethodFromInterfaceNest", (Object) class0, (Class<?>) Class.class, (Object) string0, (Class<?>) String.class, (Object) classArray0, (Class<?>) Class[].class);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapDynamicPropertyHandler mapDynamicPropertyHandler0 = new MapDynamicPropertyHandler();
      assertNotNull(mapDynamicPropertyHandler0);
      
      Object object0 = ValueUtils.getValue((Object) mapDynamicPropertyHandler0);
      assertSame(mapDynamicPropertyHandler0, object0);
      assertSame(object0, mapDynamicPropertyHandler0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "DOM";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0, string0);
      assertNotNull(dOMSource0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(dOMSource0);
      assertNotNull(xMLDocumentContainer0);
      
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: DOM; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "[$JM:wu8zCS}";
      Class<Object> class0 = Object.class;
      String string1 = null;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(string0, class0, string1, string1);
      assertFalse(propertyDescriptor0.isHidden());
      assertEquals("[$JM:wu8zCS}", propertyDescriptor0.getShortDescription());
      assertEquals("[$JM:wu8zCS}", propertyDescriptor0.getDisplayName());
      assertFalse(propertyDescriptor0.isPreferred());
      assertFalse(propertyDescriptor0.isConstrained());
      assertFalse(propertyDescriptor0.isExpert());
      assertEquals("[$JM:wu8zCS}", propertyDescriptor0.getName());
      assertFalse(propertyDescriptor0.isBound());
      assertNotNull(propertyDescriptor0);
      
      // Undeclared exception!
      try { 
        ValueUtils.getValue(object0, propertyDescriptor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: java.lang.Object.[$JM:wu8zCS}; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<XMLDocumentContainer> linkedList0 = new LinkedList<XMLDocumentContainer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = ValueUtils.getLength(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      String string0 = "\\[BcWb x.O";
      Class<Container>[] classArray0 = (Class<Container>[]) Array.newInstance(Class.class, 1);
      Class<Container> class0 = Container.class;
      Object object0 = PrivateAccess.callMethod((Class<ValueUtils>) ValueUtils.class, valueUtils0, "getAccessibleMethodFromInterfaceNest", (Object) class0, (Class<?>) Class.class, (Object) string0, (Class<?>) String.class, (Object) classArray0, (Class<?>) Class[].class);
      assertEquals(1, classArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ValueUtils.getDynamicPropertyHandler(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot allocate dynamic property handler of class java.lang.Object; java.lang.Object cannot be cast to org.apache.commons.jxpath.DynamicPropertyHandler
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNotNull(xMLDocumentContainer0);
      
      PropertyDescriptor propertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) xMLDocumentContainer0, propertyDescriptor0, int0, (Object) string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "Cannot allocate dynamic property handler of class ";
      EventReaderDelegate eventReaderDelegate0 = new EventReaderDelegate();
      assertNotNull(eventReaderDelegate0);
      
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertEquals("Cannot allocate dynamic property handler of class ", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertEquals("Cannot allocate dynamic property handler of class ", indexedPropertyDescriptor0.getDisplayName());
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("Cannot allocate dynamic property handler of class ", indexedPropertyDescriptor0.getShortDescription());
      assertNotNull(indexedPropertyDescriptor0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) eventReaderDelegate0, (PropertyDescriptor) indexedPropertyDescriptor0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: javax.xml.stream.util.EventReaderDelegate.Cannot allocate dynamic property handler of class ; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException(string0);
      assertEquals("", indexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.IndexOutOfBoundsException: ", indexOutOfBoundsException0.toString());
      assertNotNull(indexOutOfBoundsException0);
      
      int int0 = ValueUtils.getLength(indexOutOfBoundsException0);
      assertEquals("", indexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.IndexOutOfBoundsException: ", indexOutOfBoundsException0.toString());
      assertEquals(1, int0);
      
      PropertyDescriptor propertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) indexOutOfBoundsException0, propertyDescriptor0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = null;
      String string0 = "h\"q5zzR9s>y";
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("h\"q5zzR9s>y", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertEquals("h\"q5zzR9s>y", indexedPropertyDescriptor0.getDisplayName());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertEquals("h\"q5zzR9s>y", indexedPropertyDescriptor0.getShortDescription());
      assertNotNull(indexedPropertyDescriptor0);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue(object0, (PropertyDescriptor) indexedPropertyDescriptor0, (Object) string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify property: null.h\"q5zzR9s>y; No write method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = null;
      PropertyDescriptor propertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getValue(object0, propertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Method method0 = null;
      Method method1 = ValueUtils.getAccessibleMethod(method0);
      assertNull(method1);
      
      String string0 = "E~IBJ{,<S;^5";
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method1, method0, method0, method1);
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("E~IBJ{,<S;^5", indexedPropertyDescriptor0.getDisplayName());
      assertEquals("E~IBJ{,<S;^5", indexedPropertyDescriptor0.getShortDescription());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertEquals("E~IBJ{,<S;^5", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertNotNull(indexedPropertyDescriptor0);
      
      int int0 = 1632;
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) string0, (PropertyDescriptor) indexedPropertyDescriptor0, int0, (Object) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: java.lang.String.E~IBJ{,<S;^5; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int0 = 0;
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) set0, int0, (Object) linkedList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot set value of an element of a java.util.Collections$EmptySet
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      ValueUtils.setValue((Object) string0, int0, (Object) string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Container> linkedList0 = new LinkedList<Container>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Container container0 = linkedList0.pollLast();
      assertEquals(0, linkedList0.size());
      assertNull(container0);
      
      boolean boolean0 = linkedList0.add(container0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(container0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 1;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertEquals(2, linkedList0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-99);
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertEquals(0, linkedList0.size());
      assertNull(object0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) linkedList1, int0, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -99, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = null;
      String string0 = "9BV";
      DOMSource dOMSource0 = new DOMSource(node0, string0);
      assertNotNull(dOMSource0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(dOMSource0);
      assertNotNull(xMLDocumentContainer0);
      
      int int0 = 2368;
      Object object0 = ValueUtils.getValue((Object) xMLDocumentContainer0, int0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 0;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertEquals(0, linkedList0.size());
      assertNull(object0);
      
      Object object1 = ValueUtils.getValue(object0, int0);
      assertEquals(0, linkedList0.size());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      LinkedList linkedList1 = (LinkedList)ValueUtils.remove(linkedList0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ValueUtils.remove(integer0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove java.lang.Integer[0]
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = null;
      int int0 = (-7516);
      Object object1 = ValueUtils.remove(object0, int0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 1642;
      LinkedList linkedList1 = (LinkedList)ValueUtils.expandCollection(linkedList0, int0);
      assertEquals(1642, linkedList0.size());
      assertEquals(1642, linkedList1.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 30;
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals(30, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ValueUtils.expandCollection(integer0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn java.lang.Integer into a collection of size 30
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = (-341);
      // Undeclared exception!
      try { 
        ValueUtils.expandCollection(sequenceInputStream0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // adjustment of java.io.SequenceInputStream@736d73f9 to size -341 is not an expansion
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = (-1141);
      Object object0 = ValueUtils.expandCollection(evoSuiteFile0, int0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 0;
      LinkedList linkedList1 = (LinkedList)ValueUtils.expandCollection(linkedList0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      Iterator iterator0 = ValueUtils.iterate(string0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = null;
      Iterator iterator0 = ValueUtils.iterate(object0);
      assertNotNull(iterator0);
      
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getIndexedPropertyLength(iterator0, indexedPropertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator iterator0 = ValueUtils.iterate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 2141;
      // Undeclared exception!
      try { 
        ValueUtils.remove(linkedList0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such element at index 2141
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      int int0 = ValueUtils.getLength(string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      int int0 = ValueUtils.getLength(string0);
      assertEquals(1, int0);
      
      ValueUtils.setValue((Object) string0, int0, (Object) string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = "!4";
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertEquals("!4", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertEquals("!4", indexedPropertyDescriptor0.getShortDescription());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertEquals("!4", indexedPropertyDescriptor0.getDisplayName());
      assertNotNull(indexedPropertyDescriptor0);
      
      // Undeclared exception!
      try { 
        ValueUtils.getIndexedPropertyLength(class0, indexedPropertyDescriptor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No indexed read method for property !4
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      int int1 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = ValueUtils.isCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = ValueUtils.isCollection(evoSuiteFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = ValueUtils.isCollection(string0);
      assertFalse(boolean0);
  }
}
