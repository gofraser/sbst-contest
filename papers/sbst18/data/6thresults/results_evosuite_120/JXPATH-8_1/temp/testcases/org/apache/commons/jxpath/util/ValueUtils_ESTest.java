/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 18:39:38 GMT 2018
 */

package org.apache.commons.jxpath.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Iterator;
import java.util.LinkedList;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamSource;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.MapDynamicPropertyHandler;
import org.apache.commons.jxpath.XMLDocumentContainer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueUtils_ESTest extends ValueUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertFalse(linkedList0.contains(int0));
      assertNull(object0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) linkedList0, int0, object0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        ValueUtils.remove(valueUtils0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such element at index 1
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      Class<MockFileInputStream>[] classArray0 = (Class<MockFileInputStream>[]) Array.newInstance(Class.class, 9);
      Object object0 = PrivateAccess.callMethod((Class<ValueUtils>) ValueUtils.class, valueUtils0, "convert", (Object) classArray0[4], (Class<?>) Object.class, (Object) class0, (Class<?>) Class.class);
      assertNull(object0);
      assertEquals(9, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-2048);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2048), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(int0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      int int1 = 0;
      LinkedList linkedList1 = (LinkedList)ValueUtils.remove(linkedList0, int1);
      assertFalse(linkedList0.contains(int0));
      assertFalse(int1 == int0);
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = null;
      Object object1 = ValueUtils.getValue(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      assertNotNull(xMLReaderAdapter0);
      
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      assertNotNull(parserAdapter0);
      
      String string0 = " into a collection of size ";
      InputSource inputSource0 = new InputSource(string0);
      assertNotNull(inputSource0);
      
      SAXSource sAXSource0 = new SAXSource(parserAdapter0, inputSource0);
      assertNotNull(sAXSource0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(sAXSource0);
      assertNotNull(xMLDocumentContainer0);
      
      int int0 = 16000;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) xMLDocumentContainer0, int0, (Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from:  into a collection of size ; java.io.FileNotFoundException: /home/evosuite_6th/ into a collection of size  (No such file or directory)
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      int int0 = 416;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals(416, uRL0.getPort());
      assertEquals(":416", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNotNull(xMLDocumentContainer0);
      assertNull(uRL0.getRef());
      assertEquals(416, uRL0.getPort());
      assertEquals(":416", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      
      // Undeclared exception!
      try { 
        ValueUtils.isCollection(xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: null; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNotNull(xMLDocumentContainer0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      int int0 = (-3652);
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) xMLDocumentContainer0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: http://www.someFakeButWellFormedURL.org/fooExample; Cannot read XML from: http://www.someFakeButWellFormedURL.org/fooExample; Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "yIQj[el";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertEquals("/home/evosuite_6th/yIQj[el/yIQj[el", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/yIQj[el", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("yIQj[el", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      
      StreamSource streamSource0 = new StreamSource(mockFile0);
      assertNotNull(streamSource0);
      assertEquals("/home/evosuite_6th/yIQj[el/yIQj[el", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/yIQj[el", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("yIQj[el", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(streamSource0);
      assertNotNull(xMLDocumentContainer0);
      assertEquals("/home/evosuite_6th/yIQj[el/yIQj[el", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/evosuite_6th/yIQj[el", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals("yIQj[el", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        ValueUtils.getLength(xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: file:/home/evosuite_6th/%7FyIQj%5Bel/%7FyIQj%5Bel; java.io.FileNotFoundException: /home/evosuite_6th/yIQj[el/yIQj[el (No such file or directory)
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getIndexedPropertyLength(object0, indexedPropertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getDynamicPropertyHandler(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getCollectionHint(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ValueUtils.getValue(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      PropertyDescriptor propertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) evoSuiteFile0, propertyDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "NhqjuA]G??jMUh*/R}y";
      Method method0 = null;
      Method method1 = ValueUtils.getAccessibleMethod(method0);
      assertNull(method1);
      
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method1, method0, method0, method1);
      assertNotNull(indexedPropertyDescriptor0);
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("NhqjuA]G??jMUh*/R}y", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertEquals("NhqjuA]G??jMUh*/R}y", indexedPropertyDescriptor0.getShortDescription());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertEquals("NhqjuA]G??jMUh*/R}y", indexedPropertyDescriptor0.getDisplayName());
      
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) indexedPropertyDescriptor0, (PropertyDescriptor) indexedPropertyDescriptor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: java.beans.IndexedPropertyDescriptor.NhqjuA]G??jMUh*_/R}y; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StreamSource streamSource0 = new StreamSource();
      assertNotNull(streamSource0);
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(streamSource0);
      assertNotNull(xMLDocumentContainer0);
      
      int int0 = ValueUtils.getLength(xMLDocumentContainer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      String string0 = "Hqb-Q?d+B";
      Class<MockFileInputStream>[] classArray0 = (Class<MockFileInputStream>[]) Array.newInstance(Class.class, 9);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      classArray0[0] = class0;
      Object object0 = PrivateAccess.callMethod((Class<ValueUtils>) ValueUtils.class, valueUtils0, "getAccessibleMethodFromInterfaceNest", (Object) classArray0[0], (Class<?>) Class.class, (Object) string0, (Class<?>) String.class, (Object) classArray0, (Class<?>) Class[].class);
      assertNull(object0);
      assertEquals(9, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ValueUtils.getDynamicPropertyHandler(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot allocate dynamic property handler of class java.lang.Object; java.lang.Object cannot be cast to org.apache.commons.jxpath.DynamicPropertyHandler
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "DOM";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/evosuite_6th/DOM", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("DOM", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th/DOM/DOM", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/evosuite_6th/DOM", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("DOM", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th/DOM/DOM", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      XMLDocumentContainer xMLDocumentContainer0 = new XMLDocumentContainer(uRL0);
      assertNotNull(xMLDocumentContainer0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/evosuite_6th/DOM", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("DOM", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/evosuite_6th/DOM/DOM", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) xMLDocumentContainer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot read XML from: file:/home/evosuite_6th/DOM/DOM; java.lang.NullPointerException
         //
         verifyException("org.apache.commons.jxpath.XMLDocumentContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      String string0 = "<8UP;*ay 1/RG";
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertNotNull(indexedPropertyDescriptor0);
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getShortDescription());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getDisplayName());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertFalse(indexedPropertyDescriptor0.isBound());
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) method0, (PropertyDescriptor) indexedPropertyDescriptor0, int0, (Object) method0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: null.<8UP;*ay 1/RG; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyDescriptor propertyDescriptor0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ValueUtils.getValue((Object) propertyDescriptor0, propertyDescriptor0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Method> linkedList1 = new LinkedList<Method>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      PropertyDescriptor propertyDescriptor0 = null;
      // Undeclared exception!
      try { 
        ValueUtils.setValue((Object) linkedList1, propertyDescriptor0, (Object) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = null;
      String string0 = "g_\\`lo>^H9";
      Method method0 = null;
      Method method1 = ValueUtils.getAccessibleMethod(method0);
      assertNull(method1);
      
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(string0, method1, method0);
      assertNotNull(propertyDescriptor0);
      assertFalse(propertyDescriptor0.isConstrained());
      assertEquals("g_\\`lo>^H9", propertyDescriptor0.getName());
      assertFalse(propertyDescriptor0.isExpert());
      assertFalse(propertyDescriptor0.isHidden());
      assertFalse(propertyDescriptor0.isPreferred());
      assertFalse(propertyDescriptor0.isBound());
      assertEquals("g_\\`lo>^H9", propertyDescriptor0.getShortDescription());
      assertEquals("g_\\`lo>^H9", propertyDescriptor0.getDisplayName());
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue(object0, propertyDescriptor0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot modify property: null.g_\\`lo>^H9; No write method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      Object object0 = null;
      String string0 = "<8UP;*ay 1/RG";
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertNotNull(indexedPropertyDescriptor0);
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getShortDescription());
      assertEquals("<8UP;*ay 1/RG", indexedPropertyDescriptor0.getDisplayName());
      
      // Undeclared exception!
      try { 
        ValueUtils.getValue(object0, (PropertyDescriptor) indexedPropertyDescriptor0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot access property: null.<8UP;*ay 1/RG; No read method
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = null;
      int int0 = 4439;
      ValueUtils.setValue(object0, int0, object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-2559);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2559), (int)integer0);
      
      boolean boolean0 = linkedList0.offerFirst(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      int int1 = 1;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int1);
      assertFalse(linkedList0.contains(int1));
      assertTrue(linkedList0.contains(object0));
      assertFalse(int1 == int0);
      assertTrue(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertNotNull(object0);
      assertEquals(2, linkedList0.size());
      assertEquals((-2559), object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<GenericDeclaration> linkedList0 = new LinkedList<GenericDeclaration>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 0;
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertNull(object0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 1602;
      Object object1 = ValueUtils.getValue(object0, int0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-36);
      Object object0 = ValueUtils.getValue((Object) linkedList0, int0);
      assertFalse(linkedList0.contains(int0));
      assertNull(object0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      Object object0 = null;
      Object object1 = ValueUtils.getValue(object0, int0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = (-2939);
      // Undeclared exception!
      try { 
        ValueUtils.remove(object0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot remove java.lang.Object[-2939]
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = (-2048);
      // Undeclared exception!
      try { 
        ValueUtils.remove(linkedList0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2048, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = 4;
      Object object0 = ValueUtils.remove(evoSuiteFile0, int0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2602;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2602, (int)integer0);
      
      // Undeclared exception!
      try { 
        ValueUtils.remove(integer0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such element at index 2602
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = 1;
      LinkedList linkedList1 = (LinkedList)ValueUtils.expandCollection(linkedList0, int0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      ValueUtils.setValue((Object) integer0, int0, (Object) linkedList1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ValueUtils.expandCollection(object0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot turn java.lang.Object into a collection of size 1
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = null;
      int int0 = (-36);
      Object object0 = ValueUtils.expandCollection(evoSuiteURL0, int0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 9;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      Iterator iterator0 = ValueUtils.iterate(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = null;
      Iterator iterator0 = ValueUtils.iterate(object0);
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Method> linkedList0 = new LinkedList<Method>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator iterator0 = ValueUtils.iterate(linkedList0);
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-36);
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ValueUtils.expandCollection(object0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // adjustment of java.lang.Object@57abd94b to size -36 is not an expansion
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = null;
      int int0 = ValueUtils.getLength(string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = ValueUtils.getLength(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MapDynamicPropertyHandler mapDynamicPropertyHandler0 = new MapDynamicPropertyHandler();
      assertNotNull(mapDynamicPropertyHandler0);
      
      String string0 = "$G5Y?q4o3i I/&dgZ";
      Method method0 = null;
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(string0, method0, method0, method0, method0);
      assertNotNull(indexedPropertyDescriptor0);
      assertFalse(indexedPropertyDescriptor0.isPreferred());
      assertFalse(indexedPropertyDescriptor0.isBound());
      assertEquals("$G5Y?q4o3i I/&dgZ", indexedPropertyDescriptor0.getName());
      assertFalse(indexedPropertyDescriptor0.isExpert());
      assertFalse(indexedPropertyDescriptor0.isHidden());
      assertEquals("$G5Y?q4o3i I/&dgZ", indexedPropertyDescriptor0.getShortDescription());
      assertEquals("$G5Y?q4o3i I/&dgZ", indexedPropertyDescriptor0.getDisplayName());
      assertFalse(indexedPropertyDescriptor0.isConstrained());
      
      // Undeclared exception!
      try { 
        ValueUtils.getIndexedPropertyLength(mapDynamicPropertyHandler0, indexedPropertyDescriptor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No indexed read method for property $G5Y?q4o3i I/&dgZ
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      classArray0[3] = classArray0[0];
      int int0 = ValueUtils.getCollectionHint(classArray0[3]);
      assertEquals(8, classArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      int int0 = ValueUtils.getCollectionHint(class0);
      assertEquals(0, int0);
      
      int int1 = ValueUtils.getCollectionHint(class0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Container>[] classArray0 = (Class<Container>[]) Array.newInstance(Class.class, 6);
      Class<Container> class0 = Container.class;
      classArray0[2] = class0;
      classArray0[3] = classArray0[2];
      classArray0[5] = classArray0[3];
      int int0 = ValueUtils.getCollectionHint(classArray0[5]);
      assertEquals(6, classArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = ValueUtils.isCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = ValueUtils.isCollection(evoSuiteFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "phP\"uik*n";
      boolean boolean0 = ValueUtils.isCollection(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ValueUtils valueUtils0 = new ValueUtils();
      assertNotNull(valueUtils0);
      
      PropertyDescriptor propertyDescriptor0 = null;
      int int0 = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ValueUtils.setValue(object0, propertyDescriptor0, int0, (Object) valueUtils0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.util.ValueUtils", e);
      }
  }
}
