/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 24 19:04:44 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnAlgebraicSymMatrix_ESTest extends MnAlgebraicSymMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      int int1 = 338;
      PrivateAccess.callMethod((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix0, "theIndex", (Object) int0, (Class<?>) int.class, (Object) int1, (Class<?>) int.class);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix1.eigenvalues();
      double[] doubleArray0 = new double[0];
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = mnAlgebraicSymMatrix0.clone();
      PrivateAccess.setVariable((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix0, "theData", (Object) doubleArray0);
      int int2 = (-1278);
      int int3 = 0;
      mnAlgebraicSymMatrix2.clone();
      PrivateAccess.callMethod((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix0, "theIndex", (Object) int2, (Class<?>) int.class, (Object) int3, (Class<?>) int.class);
      PrivateAccess.setVariable((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix1, "theData", (Object) doubleArray0);
      PrivateAccess.setVariable((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix0, "theSize", (Object) int0);
      PrivateAccess.callMethod((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix1, "theIndex", (Object) int0, (Class<?>) int.class, (Object) int0, (Class<?>) int.class);
      PrivateAccess.setVariable((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix1, "theNRow", (Object) int0);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.invert();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      int int1 = 0;
      int int2 = (-2601);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int1;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int2;
      doubleArray0[7] = (double) int2;
      double double0 = 1.0E-35;
      doubleArray0[8] = double0;
      int int3 = 343;
      int int4 = 1;
      double double1 = 1010.3;
      try { 
        PrivateAccess.callMethod((Class<MnAlgebraicSymMatrix>) MnAlgebraicSymMatrix.class, mnAlgebraicSymMatrix0, "mneigen", (Object) doubleArray0, (Class<?>) double[].class, (Object) int1, (Class<?>) int.class, (Object) int3, (Class<?>) int.class, (Object) int4, (Class<?>) int.class, (Object) doubleArray0, (Class<?>) double[].class, (Object) double1, (Class<?>) double.class);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 343
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      try { 
        mnAlgebraicSymMatrix0.invert();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      mnAlgebraicSymMatrix0.toString();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix1.clone();
      mnAlgebraicSymMatrix1.eigenvalues();
      mnAlgebraicSymMatrix1.toString();
      int int1 = (-1686);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.get(int1, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      mnAlgebraicSymMatrix0.data();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.get(int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix1.clone();
      int int1 = mnAlgebraicSymMatrix1.nrow();
      int int2 = (-2091);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1211;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      int int1 = (-437);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.set(int1, int0, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      mnAlgebraicSymMatrix0.ncol();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix0.size();
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.eigenvalues();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      int int1 = (-3487);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix1.ncol();
      int int1 = (-714);
      int int2 = 89;
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      int int1 = 1;
      int int2 = (-1159);
      double double0 = (-847.59);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.set(int1, int2, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      int int1 = (-517);
      int int2 = (-838);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.set(int1, int2, double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132548
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 71;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      int int1 = 3418;
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix1.get(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 892;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      // Undeclared exception!
      mnAlgebraicSymMatrix0.eigenvalues();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1300;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      mnAlgebraicSymMatrix0.clone();
      int int1 = (-299);
      mnAlgebraicSymMatrix0.set(int1, int1, int1);
      // Undeclared exception!
      mnAlgebraicSymMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 944;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      int int1 = 0;
      int int2 = 2;
      mnAlgebraicSymMatrix1.get(int1, int2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix1.data();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.eigenvalues();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 892;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      mnAlgebraicSymMatrix0.ncol();
      mnAlgebraicSymMatrix0.nrow();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 97;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1275;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      // Undeclared exception!
      mnAlgebraicSymMatrix0.invert();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.set(int0, int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      double double0 = (-3155.0);
      int int1 = (-1);
      int int2 = 0;
      double double1 = (-1579.952769263026);
      int int3 = 326;
      int int4 = 0;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-2446);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      try {
        mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid matrix size: -2446
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      int int1 = 0;
      int int2 = (-2603);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get(int1, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(int0);
      assertNotNull(mnAlgebraicSymMatrix0);
      
      String string0 = mnAlgebraicSymMatrix0.toString();
      assertEquals("LASymMatrix parameters:\n\n   0.00000    0.00000 \n   0.00000    0.00000 \n", string0);
      assertNotNull(string0);
      
      MnAlgebraicVector mnAlgebraicVector0 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector0);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix1);
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      
      String string1 = mnAlgebraicSymMatrix1.toString();
      assertEquals("LASymMatrix parameters:\n\n   0.00000    0.00000 \n   0.00000    0.00000 \n", string1);
      assertNotNull(string1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix1.equals((Object)mnAlgebraicSymMatrix0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix1, mnAlgebraicSymMatrix0);
      assertNotSame(string1, string0);
      
      int int1 = (-1698);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = mnAlgebraicSymMatrix0.clone();
      assertNotNull(mnAlgebraicSymMatrix2);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix3 = mnAlgebraicSymMatrix2.clone();
      assertNotNull(mnAlgebraicSymMatrix3);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix1);
      
      int int2 = 0;
      MnAlgebraicVector mnAlgebraicVector1 = mnAlgebraicSymMatrix2.eigenvalues();
      assertNotNull(mnAlgebraicVector1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicVector1.equals((Object)mnAlgebraicVector0));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicVector1, mnAlgebraicVector0);
      
      String string2 = mnAlgebraicSymMatrix2.toString();
      assertEquals("LASymMatrix parameters:\n\n   0.00000    0.00000 \n   0.00000    0.00000 \n", string2);
      assertNotNull(string2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      int int3 = (-5863);
      int int4 = 338;
      MnAlgebraicVector mnAlgebraicVector2 = mnAlgebraicSymMatrix0.eigenvalues();
      assertNotNull(mnAlgebraicVector2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector0));
      assertFalse(mnAlgebraicVector2.equals((Object)mnAlgebraicVector1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicVector2, mnAlgebraicVector0);
      assertNotSame(mnAlgebraicVector2, mnAlgebraicVector1);
      
      mnAlgebraicSymMatrix2.invert();
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      
      int int5 = mnAlgebraicSymMatrix3.size();
      assertEquals(3, int5);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix0.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix3));
      assertFalse(mnAlgebraicSymMatrix2.equals((Object)mnAlgebraicSymMatrix1));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix2));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix0));
      assertFalse(mnAlgebraicSymMatrix3.equals((Object)mnAlgebraicSymMatrix1));
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix3);
      assertNotSame(mnAlgebraicSymMatrix2, mnAlgebraicSymMatrix1);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix2);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix0);
      assertNotSame(mnAlgebraicSymMatrix3, mnAlgebraicSymMatrix1);
      
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.set(int3, int4, int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }
}
